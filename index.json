[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "ts_temp/.external-ecmascript.js",
    "static": true,
    "longname": "ts_temp/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "ts_temp/array/adjust.js",
    "content": "import curryN from '../function/curryN';\nimport concat from './concat';\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @param {Function} fn The function to apply.\n * @param {Number} idx The index.\n * @param {Array} list An array whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n *\n * @example\n *\n *      adjust(add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]\n *      adjust(add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]\n */\nexport const adjust = curryN(3, (fn, idx, list = []) => {\n    if (idx >= list.length || idx < -list.length) {\n        return list;\n    }\n    const start = idx < 0 ? list.length : 0;\n    const index = start + idx;\n    const result = concat(list, []);\n    result[index] = fn(list[index]);\n    return result;\n});\nexport default adjust;\n//# sourceMappingURL=adjust.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/adjust.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "adjust",
    "memberof": "ts_temp/array/adjust.js",
    "static": true,
    "longname": "ts_temp/array/adjust.js~adjust",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/adjust",
    "importStyle": "{adjust}",
    "description": "Applies a function to the value at the given index of an array, returning a\nnew copy of the array with the element at the given index replaced with the\nresult of the function application.",
    "examples": [
      "\n     adjust(add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]\n     adjust(add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]"
    ],
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to apply."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": "The index."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "An array whose value\n       at the supplied index will be replaced."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A copy of the supplied array with\n        the element at index `idx` replaced with the value\n        returned by applying `fn` to the existing element."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "ts_temp/array/all.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns `true` if all the elements of the array match the predicate,\n * `false` otherwise.\n *\n * @param {Function} fn The predicate function.\n * @param {Array} arr The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied all elements, `false`\n *         otherwise.\n * @example\n *\n *      var lessThan2 = x => x < 2;\n *      var lessThan3 = x => x < 3;\n *      all(lessThan2)([1, 2]); //=> false\n *      all(lessThan3)([1, 2]); //=> true\n */\nexport const all = curryN(2, (fn, arr = []) => {\n    for (let i = 0; i < arr.length; i++) {\n        if (!fn(arr[i], i, arr)) {\n            return false;\n        }\n    }\n    return true;\n});\nexport default all;\n//# sourceMappingURL=all.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/all.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "all",
    "memberof": "ts_temp/array/all.js",
    "static": true,
    "longname": "ts_temp/array/all.js~all",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/all",
    "importStyle": "{all}",
    "description": "Returns `true` if all the elements of the array match the predicate,\n`false` otherwise.",
    "examples": [
      "\n     var lessThan2 = x => x < 2;\n     var lessThan3 = x => x < 3;\n     all(lessThan2)([1, 2]); //=> false\n     all(lessThan3)([1, 2]); //=> true"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The predicate function."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if the predicate is satisfied all elements, `false`\n        otherwise."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "ts_temp/array/any.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns `true` if at least one of elements of the list match the predicate,\n * `false` otherwise.\n *\n * @param {Function} fn The predicate function.\n * @param {Array} arr The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n *         otherwise.\n * @example\n *\n *      var lessThan0 = x => x < 0;\n *      var lessThan2 = x => x < 2;\n *      any(lessThan0)([1, 2]); //=> false\n *      any(lessThan2)([1, 2]); //=> true\n */\nexport const any = curryN(2, (fn, arr = []) => {\n    for (let i = 0; i < arr.length; i++) {\n        if (fn(arr[i], i, arr)) {\n            return true;\n        }\n    }\n    return false;\n});\nexport default any;\n//# sourceMappingURL=any.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/any.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "any",
    "memberof": "ts_temp/array/any.js",
    "static": true,
    "longname": "ts_temp/array/any.js~any",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/any",
    "importStyle": "{any}",
    "description": "Returns `true` if at least one of elements of the list match the predicate,\n`false` otherwise.",
    "examples": [
      "\n     var lessThan0 = x => x < 0;\n     var lessThan2 = x => x < 2;\n     any(lessThan0)([1, 2]); //=> false\n     any(lessThan2)([1, 2]); //=> true"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The predicate function."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if the predicate is satisfied by at least one element, `false`\n        otherwise."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "ts_temp/array/append.js",
    "content": "import concat from './concat';\nimport curryN from '../function/curryN';\n/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list of elements to add a new item to.\n *        list.\n * @return {Array} A new list containing the elements of the old list followed by `el`.\n * @example\n *\n *      append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      append('tests', []); //=> ['tests']\n *      append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */\nexport const append = curryN(2, (el, list) => concat(list, [el]));\nexport default append;\n//# sourceMappingURL=append.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/append.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "append",
    "memberof": "ts_temp/array/append.js",
    "static": true,
    "longname": "ts_temp/array/append.js~append",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/append",
    "importStyle": "{append}",
    "description": "Returns a new list containing the contents of the given list, followed by\nthe given element.",
    "examples": [
      "\n     append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n     append('tests', []); //=> ['tests']\n     append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The element to add to the end of the new list."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The list of elements to add a new item to.\n       list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A new list containing the elements of the old list followed by `el`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "ts_temp/array/concat.js",
    "content": "import curryN from '../function/curryN';\nimport isArray from '../is/array';\nimport isArrayLike from '../is/arrayLike';\nimport slice from './slice';\n/**\n * Returns the result of concatenating the given arrays or strings.\n *\n * @param {Array|String} a The first list\n * @param {Array|String} b The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      concat('ABC', 'DEF'); // 'ABCDEF'\n *      concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      concat([], []); //=> []\n */\nexport const concat = curryN(2, (a = [], b = []) => {\n    if (isArray(a)) {\n        return a.concat(b);\n    }\n    if (isArrayLike(a)) {\n        const resultArr = slice(0, a.length, a);\n        for (let i = 0; i < b.length; i++) {\n            resultArr.push(b[i]);\n        }\n        return resultArr;\n    }\n    return a + b;\n});\nexport default concat;\n//# sourceMappingURL=concat.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/concat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "concat",
    "memberof": "ts_temp/array/concat.js",
    "static": true,
    "longname": "ts_temp/array/concat.js~concat",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/concat",
    "importStyle": "{concat}",
    "description": "Returns the result of concatenating the given arrays or strings.",
    "examples": [
      "\n     concat('ABC', 'DEF'); // 'ABCDEF'\n     concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     concat([], []); //=> []"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The first list"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "The second list"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array",
        "String"
      ],
      "spread": false,
      "description": "A list consisting of the elements of `firstList` followed by the elements of\n`secondList`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "ts_temp/array/difference.js",
    "content": "import curryN from '../function/curryN';\nimport indexOf from './indexOf';\n/**\n * Returns the array of all elements in the first array not\n * contained in the second array.\n *\n * @param {Array} a The first array.\n * @param {Array} b The second array.\n * @return {Array} The elements in `a` that are not in `b`.\n * @example\n *\n *      difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n */\nexport const difference = curryN(2, (a = [], b = []) => {\n    const result = [];\n    for (let i = 0; i < a.length; i++) {\n        if (indexOf(a[i], b) < 0) {\n            result.push(a[i]);\n        }\n    }\n    return result;\n});\nexport default difference;\n//# sourceMappingURL=difference.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/difference.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "difference",
    "memberof": "ts_temp/array/difference.js",
    "static": true,
    "longname": "ts_temp/array/difference.js~difference",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/difference",
    "importStyle": "{difference}",
    "description": "Returns the array of all elements in the first array not\ncontained in the second array.",
    "examples": [
      "\n     difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n     difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The first array."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "The second array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The elements in `a` that are not in `b`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "ts_temp/array/drop.js",
    "content": "import slice from './slice';\nimport curryN from '../function/curryN';\n/**\n * Returns all but the first `n` elements of the given list, string.\n *\n * @param {Number} n\n * @param {*} xs\n * @return {*} A copy of list without the first `n` elements\n * @example\n *\n *      drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      drop(3, ['foo', 'bar', 'baz']); //=> []\n *      drop(4, ['foo', 'bar', 'baz']); //=> []\n */\nexport const drop = curryN(2, (n, xs) => slice(Math.max(0, n), Infinity, xs));\nexport default drop;\n//# sourceMappingURL=drop.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/drop.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "drop",
    "memberof": "ts_temp/array/drop.js",
    "static": true,
    "longname": "ts_temp/array/drop.js~drop",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/drop",
    "importStyle": "{drop}",
    "description": "Returns all but the first `n` elements of the given list, string.",
    "examples": [
      "\n     drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n     drop(3, ['foo', 'bar', 'baz']); //=> []\n     drop(4, ['foo', 'bar', 'baz']); //=> []"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A copy of list without the first `n` elements"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "ts_temp/array/dropLast.js",
    "content": "import curryN from '../function/curryN';\nimport take from './take';\n/**\n * Returns a list containing all but the last `n` elements of the given `list`.\n *\n * @param {Number} n The number of elements of `list` to skip.\n * @param {Array} xs The list of elements to consider.\n * @return {Array} A copy of the list with only the first `list.length - n` elements\n * @example\n *\n *      dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      dropLast(3, 'ramda');               //=> 'ra'\n */\nexport const dropLast = curryN(2, (n, xs) => take(n < xs.length ? xs.length - n : 0, xs));\nexport default dropLast;\n//# sourceMappingURL=dropLast.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/dropLast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "dropLast",
    "memberof": "ts_temp/array/dropLast.js",
    "static": true,
    "longname": "ts_temp/array/dropLast.js~dropLast",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/dropLast",
    "importStyle": "{dropLast}",
    "description": "Returns a list containing all but the last `n` elements of the given `list`.",
    "examples": [
      "\n     dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n     dropLast(3, ['foo', 'bar', 'baz']); //=> []\n     dropLast(4, ['foo', 'bar', 'baz']); //=> []\n     dropLast(3, 'ramda');               //=> 'ra'"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The number of elements of `list` to skip."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The list of elements to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A copy of the list with only the first `list.length - n` elements"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "ts_temp/array/dropWhile.js",
    "content": "import curryN from '../function/curryN';\nimport slice from './slice';\n/**\n * Returns a new list excluding the leading elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`.\n *\n * @param {Function} fn The function called per iteration.\n * @param {Array} arr The collection to iterate over.\n * @return {Array} A new array.\n * @example\n *\n *      var lteTwo = x => x <= 2;\n *\n *      dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n */\nexport const dropWhile = curryN(2, (fn, arr = []) => {\n    let idx = 0;\n    while (idx < arr.length && fn(arr[idx], idx, arr)) {\n        idx += 1;\n    }\n    return slice(idx, arr.length, arr);\n});\nexport default dropWhile;\n//# sourceMappingURL=dropWhile.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/dropWhile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "dropWhile",
    "memberof": "ts_temp/array/dropWhile.js",
    "static": true,
    "longname": "ts_temp/array/dropWhile.js~dropWhile",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/dropWhile",
    "importStyle": "{dropWhile}",
    "description": "Returns a new list excluding the leading elements of a given list which\nsatisfy the supplied predicate function. It passes each value to the supplied\npredicate function, skipping elements while the predicate function returns\n`true`.",
    "examples": [
      "\n     var lteTwo = x => x <= 2;\n\n     dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]"
    ],
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function called per iteration."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The collection to iterate over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A new array."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "ts_temp/array/each.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * @param {Function} fn The function to invoke. Receives three argument: `value`, `index`, `arr`.\n * @param {Array} arr The list to iterate over.\n * @example\n *\n *      var printXPlusFive = x => console.log(x + 5);\n *      each(printXPlusFive, [1, 2, 3]);\n *      // logs 6\n *      // logs 7\n *      // logs 8\n */\nexport const each = curryN(2, (fn, arr = []) => {\n    for (let i = 0; i < arr.length; i++) {\n        fn(arr[i], i, arr);\n    }\n});\nexport default each;\n//# sourceMappingURL=each.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/each.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "each",
    "memberof": "ts_temp/array/each.js",
    "static": true,
    "longname": "ts_temp/array/each.js~each",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/each",
    "importStyle": "{each}",
    "description": "Iterate over an input `list`, calling a provided function `fn` for each\nelement in the list.",
    "examples": [
      "\n     var printXPlusFive = x => console.log(x + 5);\n     each(printXPlusFive, [1, 2, 3]);\n     // logs 6\n     // logs 7\n     // logs 8"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to invoke. Receives three argument: `value`, `index`, `arr`."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The list to iterate over."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "ts_temp/array/filter.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Takes a predicate and a \"arr\", and returns a new array of the\n * same type containing the members of the given arr which satisfy the\n * given predicate.\n *\n * @param {Function} fn - predicate\n * @param {Array} arr\n * @return {Array}\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n */\nexport const filter = curryN(2, (fn, arr = []) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (fn(arr[i], i, arr)) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n});\nexport default filter;\n//# sourceMappingURL=filter.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/filter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "filter",
    "memberof": "ts_temp/array/filter.js",
    "static": true,
    "longname": "ts_temp/array/filter.js~filter",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/filter",
    "importStyle": "{filter}",
    "description": "Takes a predicate and a \"arr\", and returns a new array of the\nsame type containing the members of the given arr which satisfy the\ngiven predicate.",
    "examples": [
      "\n     var isEven = n => n % 2 === 0;\n\n     filter(isEven, [1, 2, 3, 4]); //=> [2, 4]"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "predicate"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "ts_temp/array/find.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns the first element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Array} arr The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      find(x => x.a === 2)(xs); //=> {a: 2}\n *      find(x => x.a === 4)(xs); //=> undefined\n */\nexport const find = curryN(2, (fn, arr = []) => {\n    for (let i = 0; i < arr.length; i++) {\n        if (fn(arr[i], i, arr)) {\n            return arr[i];\n        }\n    }\n});\nexport default find;\n//# sourceMappingURL=find.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/find.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "find",
    "memberof": "ts_temp/array/find.js",
    "static": true,
    "longname": "ts_temp/array/find.js~find",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/find",
    "importStyle": "{find}",
    "description": "Returns the first element of the list which matches the predicate, or\n`undefined` if no element matches.",
    "examples": [
      "\n     var xs = [{a: 1}, {a: 2}, {a: 3}];\n     find(x => x.a === 2)(xs); //=> {a: 2}\n     find(x => x.a === 4)(xs); //=> undefined"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The predicate function used to determine if the element is the\n       desired one."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The element found, or `undefined`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "ts_temp/array/findIndex.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns the index of the first element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} arr The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      findIndex(x => x.a === 2)(xs); //=> 1\n *      findIndex(x => x.a === 4)(xs); //=> -1\n */\nexport const findIndex = curryN(2, (fn, arr = []) => {\n    for (let i = 0; i < arr.length; i++) {\n        if (fn(arr[i], i, arr)) {\n            return i;\n        }\n    }\n    return -1;\n});\nexport default findIndex;\n//# sourceMappingURL=findIndex.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/findIndex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "findIndex",
    "memberof": "ts_temp/array/findIndex.js",
    "static": true,
    "longname": "ts_temp/array/findIndex.js~findIndex",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/findIndex",
    "importStyle": "{findIndex}",
    "description": "Returns the index of the first element of the list which matches the\npredicate, or `-1` if no element matches.",
    "examples": [
      "\n     var xs = [{a: 1}, {a: 2}, {a: 3}];\n     findIndex(x => x.a === 2)(xs); //=> 1\n     findIndex(x => x.a === 4)(xs); //=> -1"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The predicate function used to determine if the element is the\ndesired one."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The index of the element found, or `-1`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "ts_temp/array/findLast.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns the last element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @example\n *\n *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *\n *      findLast(propEq('a', 1))(xs); //=> {a: 1, b: 1}\n *      findLast(propEq('a', 4))(xs); //=> undefined\n */\nexport const findLast = curryN(2, (fn, list) => {\n    for (let i = list.length - 1; i >= 0; i--) {\n        if (fn(list[i], i, list)) {\n            return list[i];\n        }\n    }\n});\nexport default findLast;\n//# sourceMappingURL=findLast.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/findLast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "findLast",
    "memberof": "ts_temp/array/findLast.js",
    "static": true,
    "longname": "ts_temp/array/findLast.js~findLast",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/findLast",
    "importStyle": "{findLast}",
    "description": "Returns the last element of the list which matches the predicate, or\n`undefined` if no element matches.",
    "examples": [
      "\n     const xs = [{a: 1, b: 0}, {a:1, b: 1}];\n\n     findLast(propEq('a', 1))(xs); //=> {a: 1, b: 1}\n     findLast(propEq('a', 4))(xs); //=> undefined"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The predicate function used to determine if the element is the\ndesired one."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The array to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The element found, or `undefined`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "ts_temp/array/flatten.js",
    "content": "import isArrayLike from '../is/arrayLike';\n/**\n * Returns a new list by pulling every item out of it (and all its sub-arrays)\n * and putting them in a new array, depth-first.\n *\n * @param {Array} arr The array to consider.\n * @return {Array} The flattened list.\n * @example\n *\n *      flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nexport const flatten = (arr = []) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i++) {\n        const a = arr[i];\n        if (isArrayLike(a)) {\n            const nested = flatten(a);\n            for (let j = 0; j < nested.length; j++) {\n                result.push(nested[j]);\n            }\n        }\n        else {\n            result.push(a);\n        }\n    }\n    return result;\n};\nexport default flatten;\n//# sourceMappingURL=flatten.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/flatten.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "flatten",
    "memberof": "ts_temp/array/flatten.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/flatten.js~flatten",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/flatten",
    "importStyle": "{flatten}",
    "description": "Returns a new list by pulling every item out of it (and all its sub-arrays)\nand putting them in a new array, depth-first.",
    "examples": [
      "\n     flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n     //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The flattened list."
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "ts_temp/array/groupBy.js",
    "content": "import curryN from '../function/curryN';\nimport map from './map';\n/**\n * Creates an array of arrays generated from the results of running\n * each element of list thru each `fn`. The corresponding\n * value of each index is an array of elements satisfies to function with that index, and\n * the last array is elements with no satisfied function\n *\n * @param {Array<Function>} fns The functions to check values in a list.\n * @param {Array} list The list to iterate over.\n * @returns {Array} Returns the composed array.\n * @example\n *\n * groupBy([isPositive, isZero, isNegative], [0, -3, 2, 'str', 4, -1]);// => [[2,4], [0], [-3, -1], ['str']]\n */\nexport const groupBy = curryN(2, (fns, arr = []) => {\n    const n = fns.length;\n    const result = map(() => [], Array(n));\n    const rest = [];\n    for (let arrI = 0; arrI < arr.length; arrI++) {\n        const value = arr[arrI];\n        let fnsI;\n        for (fnsI = 0; fnsI < n; fnsI++) {\n            if (fns[fnsI](value, arrI, arr)) {\n                result[fnsI].push(value);\n                break;\n            }\n        }\n        if (fnsI === n) {\n            rest.push(value);\n        }\n    }\n    result.push(rest);\n    return result;\n});\nexport default groupBy;\n//# sourceMappingURL=groupBy.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/groupBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "groupBy",
    "memberof": "ts_temp/array/groupBy.js",
    "static": true,
    "longname": "ts_temp/array/groupBy.js~groupBy",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/groupBy",
    "importStyle": "{groupBy}",
    "description": "Creates an array of arrays generated from the results of running\neach element of list thru each `fn`. The corresponding\nvalue of each index is an array of elements satisfies to function with that index, and\nthe last array is elements with no satisfied function",
    "examples": [
      "\ngroupBy([isPositive, isZero, isNegative], [0, -3, 2, 'str', 4, -1]);// => [[2,4], [0], [-3, -1], ['str']]"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Returns the composed array."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Function>"
        ],
        "spread": false,
        "optional": false,
        "name": "fns",
        "description": "The functions to check values in a list."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The list to iterate over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Returns the composed array."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "ts_temp/array/head.js",
    "content": "/**\n * Returns the first element of the given array.\n *\n * @param {Array} arr\n * @return {*}\n * @example\n *\n *      head(['fi', 'fo', 'fum']); //=> 'fi'\n *      head([]); //=> undefined\n */\nexport const head = ((arr) => arr && arr[0]);\nexport default head;\n//# sourceMappingURL=head.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/head.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "head",
    "memberof": "ts_temp/array/head.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/head.js~head",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/head",
    "importStyle": "{head}",
    "description": "Returns the first element of the given array.",
    "examples": [
      "\n     head(['fi', 'fo', 'fum']); //=> 'fi'\n     head([]); //=> undefined"
    ],
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "ts_temp/array/includes.js",
    "content": "import curryN from '../function/curryN';\nimport indexOf from './indexOf';\n/**\n * Dispatches call to arr.indexOf, returns true if arr is array and value in the array or\n * if arr is string and value is substring of arr\n *\n * @param {*} value The item to compare against.\n * @param {Array | String} arr The array to consider.\n * @return {Boolean} `true` if the item is in the list, `false` otherwise.\n * @example\n *\n *      includes(3, [1, 2, 3]); //=> true\n *      includes(4, [1, 2, 3]); //=> false\n *      includes('test', 'aaatest'); //=> true\n */\nexport const includes = curryN(2, (value, arr = []) => indexOf(value, arr) !== -1);\nexport default includes;\n//# sourceMappingURL=includes.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/includes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "includes",
    "memberof": "ts_temp/array/includes.js",
    "static": true,
    "longname": "ts_temp/array/includes.js~includes",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/includes",
    "importStyle": "{includes}",
    "description": "Dispatches call to arr.indexOf, returns true if arr is array and value in the array or\nif arr is string and value is substring of arr",
    "examples": [
      "\n     includes(3, [1, 2, 3]); //=> true\n     includes(4, [1, 2, 3]); //=> false\n     includes('test', 'aaatest'); //=> true"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The item to compare against."
      },
      {
        "nullable": null,
        "types": [
          "Array ",
          " String"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if the item is in the list, `false` otherwise."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "ts_temp/array/indexBy.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Given a function that generates a key, turns a list of objects into an\n * object indexing the objects by the given key. Note that if multiple\n * objects generate the same value for the indexing key only the last value\n * will be included in the generated object.\n *\n * @param {Function} fn Function :: a -> String\n * @param {Array} arr The array of objects to index\n * @return {Object} An object indexing each array element by the given property.\n * @example\n *\n *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n *      indexBy(x => x.id, list);\n *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n */\nexport const indexBy = curryN(2, (fn, arr = []) => {\n    const result = {};\n    for (let i = 0; i < arr.length; i++) {\n        result[fn(arr[i], i, arr)] = arr[i];\n    }\n    return result;\n});\nexport default indexBy;\n//# sourceMappingURL=indexBy.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/indexBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "indexBy",
    "memberof": "ts_temp/array/indexBy.js",
    "static": true,
    "longname": "ts_temp/array/indexBy.js~indexBy",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/indexBy",
    "importStyle": "{indexBy}",
    "description": "Given a function that generates a key, turns a list of objects into an\nobject indexing the objects by the given key. Note that if multiple\nobjects generate the same value for the indexing key only the last value\nwill be included in the generated object.",
    "examples": [
      "\n     var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n     indexBy(x => x.id, list);\n     //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Function :: a -> String"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array of objects to index"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object indexing each array element by the given property."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "ts_temp/array/indexOf.js",
    "content": "import curryN from '../function/curryN';\nimport isString from '../is/string';\n/**\n * Returns the position of the first occurrence of an item in an array, or -1\n * if the item is not included in the array.\n *\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @example\n *\n *      indexOf(3, [1,2,3,4]); //=> 2\n *      indexOf(10, [1,2,3,4]); //=> -1\n */\nexport const indexOf = curryN(2, (target, xs = []) => {\n    if (isString(xs)) {\n        return xs.indexOf(target);\n    }\n    return Array.prototype.indexOf.call(xs, target);\n});\nexport default indexOf;\n//# sourceMappingURL=indexOf.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/indexOf.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "indexOf",
    "memberof": "ts_temp/array/indexOf.js",
    "static": true,
    "longname": "ts_temp/array/indexOf.js~indexOf",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/indexOf",
    "importStyle": "{indexOf}",
    "description": "Returns the position of the first occurrence of an item in an array, or -1\nif the item is not included in the array.",
    "examples": [
      "\n     indexOf(3, [1,2,3,4]); //=> 2\n     indexOf(10, [1,2,3,4]); //=> -1"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The item to find."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The array to search in."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the index of the target, or -1 if the target is not found."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "ts_temp/array/init.js",
    "content": "import slice from './slice';\n/**\n * Returns all but the last element of the given list or string.\n *\n * @param {Array} arr\n * @return {*}\n * @example\n *\n *      init([1, 2, 3]);  //=> [1, 2]\n *      init([1, 2]);     //=> [1]\n *      init([1]);        //=> []\n *      init([]);         //=> []\n */\nexport const init = ((arr) => slice(0, -1, arr));\nexport default init;\n//# sourceMappingURL=init.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/init.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "init",
    "memberof": "ts_temp/array/init.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/init.js~init",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/init",
    "importStyle": "{init}",
    "description": "Returns all but the last element of the given list or string.",
    "examples": [
      "\n     init([1, 2, 3]);  //=> [1, 2]\n     init([1, 2]);     //=> [1]\n     init([1]);        //=> []\n     init([]);         //=> []"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "ts_temp/array/intersection.js",
    "content": "import curryN from '../function/curryN';\nimport indexOf from './indexOf';\n/**\n * Combines two array into a set (i.e. no duplicates) composed of those\n * elements common to both arrays.\n *\n * @param {Array} a The first array.\n * @param {Array} b The second array.\n * @return {Array} The array of elements found in both `a` and `b`.\n * @example\n *\n *      intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */\nexport const intersection = curryN(2, (a = [], b = []) => {\n    const result = [];\n    for (let i = 0; i < a.length; i++) {\n        if (indexOf(a[i], b) >= 0) {\n            result.push(a[i]);\n        }\n    }\n    return result;\n});\nexport default intersection;\n//# sourceMappingURL=intersection.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/intersection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "intersection",
    "memberof": "ts_temp/array/intersection.js",
    "static": true,
    "longname": "ts_temp/array/intersection.js~intersection",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/intersection",
    "importStyle": "{intersection}",
    "description": "Combines two array into a set (i.e. no duplicates) composed of those\nelements common to both arrays.",
    "examples": [
      "\n     intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The first array."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "The second array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The array of elements found in both `a` and `b`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "ts_temp/array/join.js",
    "content": "import curryN from '../function/curryN';\nimport isArray from '../is/array';\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @param {String} separator The string used to separate the elements.\n * @param {Array} arr The elements to join into a string.\n * @return {String} str The string made by concatenating `arr` with `separator`.\n * @example\n *\n *      var spacer = join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      join('|', [1, 2, 3]);    //=> '1|2|3'\n */\nexport const join = curryN(2, (separator = '', arr = []) => {\n    let resultArr;\n    if (isArray(arr)) {\n        resultArr = arr;\n    }\n    else {\n        resultArr = Array.prototype.slice.call(arr);\n    }\n    return resultArr.join(separator);\n});\nexport default join;\n//# sourceMappingURL=join.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/join.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "join",
    "memberof": "ts_temp/array/join.js",
    "static": true,
    "longname": "ts_temp/array/join.js~join",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/join",
    "importStyle": "{join}",
    "description": "Returns a string made by inserting the `separator` between each element and\nconcatenating all the elements into a single string.",
    "examples": [
      "\n     var spacer = join(' ');\n     spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n     join('|', [1, 2, 3]);    //=> '1|2|3'"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "separator",
        "description": "The string used to separate the elements."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The elements to join into a string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "str The string made by concatenating `arr` with `separator`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "ts_temp/array/last.js",
    "content": "/**\n * Returns the last element of the given array.\n *\n * @param {Array} arr\n * @return {*}\n * @example\n *\n *      last(['fi', 'fo', 'fum']); //=> 'fum'\n *      last([]); //=> undefined\n */\nexport const last = ((arr) => arr && arr[arr.length - 1]);\nexport default last;\n//# sourceMappingURL=last.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/last.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "last",
    "memberof": "ts_temp/array/last.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/last.js~last",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/last",
    "importStyle": "{last}",
    "description": "Returns the last element of the given array.",
    "examples": [
      "\n     last(['fi', 'fo', 'fum']); //=> 'fum'\n     last([]); //=> undefined"
    ],
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "ts_temp/array/length.js",
    "content": "/**\n * Returns the number of elements in the array by returning `arr.length`.\n *\n * @param {Array} arr The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      length([]); //=> 0\n *      length([1, 2, 3]); //=> 3\n */\nexport const length = ((arr) => arr && arr.length);\nexport default length;\n//# sourceMappingURL=length.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/length.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "length",
    "memberof": "ts_temp/array/length.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/length.js~length",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/length",
    "importStyle": "{length}",
    "description": "Returns the number of elements in the array by returning `arr.length`.",
    "examples": [
      "\n     length([]); //=> 0\n     length([1, 2, 3]); //=> 3"
    ],
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to inspect."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The length of the array."
    }
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "ts_temp/array/map.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Creates an array of values by running each element in list through fn. The fn is invoked with three arguments:\n * (value, index, arr).\n *\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} arr The list to be iterated over.\n * @return {Array} The new list.\n * @example\n *\n *      var double = x => x * 2;\n *\n *      map(double, [1, 2, 3]); //=> [2, 4, 6]\n */\nexport const map = curryN(2, (fn, arr = []) => {\n    const len = arr.length;\n    const result = new Array(len);\n    for (let i = 0; i < len; i++) {\n        result[i] = fn(arr[i], i, arr);\n    }\n    return result;\n});\nexport default map;\n//# sourceMappingURL=map.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "map",
    "memberof": "ts_temp/array/map.js",
    "static": true,
    "longname": "ts_temp/array/map.js~map",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/map",
    "importStyle": "{map}",
    "description": "Creates an array of values by running each element in list through fn. The fn is invoked with three arguments:\n(value, index, arr).",
    "examples": [
      "\n     var double = x => x * 2;\n\n     map(double, [1, 2, 3]); //=> [2, 4, 6]"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to be called on every element of the input `list`."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The list to be iterated over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The new list."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "ts_temp/array/maxBy.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Return max value in array, depending on result of calling `fn`\n *\n * @param {Function} fn The function invoked per element.\n * @param {Array} arr\n * @returns {*} Returns the maximum value.\n * @example\n *\n *      var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n *      maxBy(o => o.n, objects); // => { 'n': 2 }\n *\n */\nexport const maxBy = curryN(2, (fn, arr = []) => {\n    let result;\n    let max = -Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        const computed = fn(arr[i], i, arr);\n        if (computed > max) {\n            max = computed;\n            result = arr[i];\n        }\n    }\n    return result;\n});\nexport default maxBy;\n//# sourceMappingURL=maxBy.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/maxBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "maxBy",
    "memberof": "ts_temp/array/maxBy.js",
    "static": true,
    "longname": "ts_temp/array/maxBy.js~maxBy",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/maxBy",
    "importStyle": "{maxBy}",
    "description": "Return max value in array, depending on result of calling `fn`",
    "examples": [
      "\n     var objects = [{ 'n': 1 }, { 'n': 2 }];\n\n     maxBy(o => o.n, objects); // => { 'n': 2 }"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} Returns the maximum value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function invoked per element."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Returns the maximum value."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "ts_temp/array/nth.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns the nth element of the given array. If n is negative the\n * element at index length + n is returned.\n *\n * @param {Number} index\n * @param {*} arr\n * @return {*}\n * @example\n *\n *      var list = ['foo', 'bar', 'baz', 'quux'];\n *      nth(1, list); //=> 'bar'\n *      nth(2, list); //=> 'baz'\n *      nth(-1, list); //=> 'quux'\n *      nth(-99, list); //=> undefined\n */\nexport const nth = curryN(2, (index = 0, arr = []) => {\n    if (index < 0) {\n        index += arr.length;\n    }\n    return arr[index];\n});\nexport default nth;\n//# sourceMappingURL=nth.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/nth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "nth",
    "memberof": "ts_temp/array/nth.js",
    "static": true,
    "longname": "ts_temp/array/nth.js~nth",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/nth",
    "importStyle": "{nth}",
    "description": "Returns the nth element of the given array. If n is negative the\nelement at index length + n is returned.",
    "examples": [
      "\n     var list = ['foo', 'bar', 'baz', 'quux'];\n     nth(1, list); //=> 'bar'\n     nth(2, list); //=> 'baz'\n     nth(-1, list); //=> 'quux'\n     nth(-99, list); //=> undefined"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "ts_temp/array/partition.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Takes a predicate and a array and returns the\n * pair of arrays of the same type of elements which do and do not\n * satisfy, the predicate, respectively.\n *\n * @param {Function} fn A predicate to determine which side the element belongs to.\n * @param {Array} arr the array to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @example\n *\n *      partition(includes('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n */\nexport const partition = curryN(2, (fn, arr = []) => {\n    const t = [];\n    const f = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (fn(arr[i], i, arr)) {\n            t.push(arr[i]);\n        }\n        else {\n            f.push(arr[i]);\n        }\n    }\n    return [t, f];\n});\nexport default partition;\n//# sourceMappingURL=partition.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/partition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "partition",
    "memberof": "ts_temp/array/partition.js",
    "static": true,
    "longname": "ts_temp/array/partition.js~partition",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/partition",
    "importStyle": "{partition}",
    "description": "Takes a predicate and a array and returns the\npair of arrays of the same type of elements which do and do not\nsatisfy, the predicate, respectively.",
    "examples": [
      "\n     partition(includes('s'), ['sss', 'ttt', 'foo', 'bars']);\n     // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "A predicate to determine which side the element belongs to."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "the array to partition."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array, containing first the subset of elements that satisfy the\n        predicate, and second the subset of elements that do not satisfy."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "ts_temp/array/pluck.js",
    "content": "import curryN from '../function/curryN';\nimport prop from '../object/prop';\nimport map from './map';\n/**\n * Returns a new list by plucking the same named property off all objects in the list supplied.\n *\n * @param {String} key The key name to pluck off of each object.\n * @param {Array} arr The array to consider.\n * @return {Array} The list of values for the given key.\n * @example\n *\n *      pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n *      pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n */\nexport const pluck = curryN(2, (key, arr = []) => map(prop(key), arr));\nexport default pluck;\n//# sourceMappingURL=pluck.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/pluck.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "pluck",
    "memberof": "ts_temp/array/pluck.js",
    "static": true,
    "longname": "ts_temp/array/pluck.js~pluck",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/pluck",
    "importStyle": "{pluck}",
    "description": "Returns a new list by plucking the same named property off all objects in the list supplied.",
    "examples": [
      "\n     pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n     pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key name to pluck off of each object."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The list of values for the given key."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "ts_temp/array/range.js",
    "content": "/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @param {number} [a=0] The start of the range.\n * @param {number} b The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @example\n *\n * range(4); // => [0, 1, 2, 3]\n *\n * range(-4); // => [0, -1, -2, -3]\n *\n * range(1, 5); // => [1, 2, 3, 4]\n *\n * range(0, 20, 5); // => [0, 5, 10, 15]\n *\n * range(0, -4, -1); // => [0, -1, -2, -3]\n *\n * range(0); // => []\n */\nexport const range = (a, b, step) => {\n    if (typeof b !== 'number') {\n        b = a;\n        a = 0;\n    }\n    if (typeof step !== 'number') {\n        step = a < b ? 1 : -1;\n    }\n    const length = Math.max(Math.ceil((b - a) / (step || 1)), 0);\n    const result = new Array(length);\n    let x = a;\n    for (let i = 0; i < length; i++) {\n        result[i] = x;\n        x += step;\n    }\n    return result;\n};\nexport default range;\n//# sourceMappingURL=range.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/range.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "range",
    "memberof": "ts_temp/array/range.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/range.js~range",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/range",
    "importStyle": "{range}",
    "description": "Creates an array of numbers (positive and/or negative) progressing from\n`start` up to, but not including, `end`. A step of `-1` is used if a negative\n`start` is specified without an `end` or `step`. If `end` is not specified,\nit's set to `start` with `start` then set to `0`.\n\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
    "examples": [
      "\nrange(4); // => [0, 1, 2, 3]\n\nrange(-4); // => [0, -1, -2, -3]\n\nrange(1, 5); // => [1, 2, 3, 4]\n\nrange(0, 20, 5); // => [0, 5, 10, 15]\n\nrange(0, -4, -1); // => [0, -1, -2, -3]\n\nrange(0); // => []"
    ],
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Returns the range of numbers."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "a",
        "description": "The start of the range."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "The end of the range."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "step",
        "description": "The value to increment or decrement by."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Returns the range of numbers."
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "ts_temp/array/reduce.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} arr The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3];\n *      var plus = (a, b) => a + b;\n *\n *      reduce(plus, 10, numbers); //=> 16\n */\nexport const reduce = curryN(3, (fn, acc, arr = []) => {\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n        acc = fn(acc, arr[i], i, arr);\n    }\n    return acc;\n});\nexport default reduce;\n//# sourceMappingURL=reduce.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/reduce.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "reduce",
    "memberof": "ts_temp/array/reduce.js",
    "static": true,
    "longname": "ts_temp/array/reduce.js~reduce",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/reduce",
    "importStyle": "{reduce}",
    "description": "Returns a single item by iterating through the list, successively calling\nthe iterator function and passing it an accumulator value and the current\nvalue from the array, and then passing the result to the next call.",
    "examples": [
      "\n     var numbers = [1, 2, 3];\n     var plus = (a, b) => a + b;\n\n     reduce(plus, 10, numbers); //=> 16"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The iterator function. Receives two values, the accumulator and the\n       current element from the array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "acc",
        "description": "The accumulator value."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The list to iterate over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The final, accumulated value."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "ts_temp/array/reduceWhile.js",
    "content": "import isNil from '../is/nil';\nimport curryN from '../function/curryN';\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function. reduceWhile also takes a predicate that is evaluated\n * before each step. If the predicate returns false, it \"short-circuits\"\n * the iteration and returns the current value of the accumulator.\n *\n * **Note:** if `arr` is undefined or null, `acc` will be returned by reference immediately\n *\n * @param {Function} pred The predicate function.\n *        If it returns a truthy value, reduce continues. Receives the accumulator and the current element\n * @param {Function} fn The iterator function. Receives four values,\n *        the accumulator, the current element from the array, its index, and the original array.\n * @param {*} acc The accumulator value.\n * @param {Array} arr The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      reduceWhile(acc => acc.length < 3, (acc, x) => acc + x, '1', ['2', '3', '4', '5']) // '123'\n *\n */\nexport const reduceWhile = curryN(4, (pred, fn, acc, arr = []) => {\n    // eslint-disable-line max-params\n    if (isNil(arr)) {\n        return acc;\n    }\n    const length = arr.length;\n    for (let index = 0, curr = arr[0]; index < length && pred(acc, curr, index, arr); curr = arr[++index] // eslint-disable-line no-plusplus\n    ) {\n        acc = fn(acc, curr, index, arr); // eslint-disable-line no-param-reassign\n    }\n    return acc;\n});\nexport default reduceWhile;\n//# sourceMappingURL=reduceWhile.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/reduceWhile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "reduceWhile",
    "memberof": "ts_temp/array/reduceWhile.js",
    "static": true,
    "longname": "ts_temp/array/reduceWhile.js~reduceWhile",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/reduceWhile",
    "importStyle": "{reduceWhile}",
    "description": "Returns a single item by iterating through the list, successively calling\nthe iterator function. reduceWhile also takes a predicate that is evaluated\nbefore each step. If the predicate returns false, it \"short-circuits\"\nthe iteration and returns the current value of the accumulator.\n\n**Note:** if `arr` is undefined or null, `acc` will be returned by reference immediately",
    "examples": [
      "\n     reduceWhile(acc => acc.length < 3, (acc, x) => acc + x, '1', ['2', '3', '4', '5']) // '123'"
    ],
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pred",
        "description": "The predicate function.\n       If it returns a truthy value, reduce continues. Receives the accumulator and the current element"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The iterator function. Receives four values,\n       the accumulator, the current element from the array, its index, and the original array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "acc",
        "description": "The accumulator value."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The list to iterate over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The final, accumulated value."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "ts_temp/array/reject.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Takes a predicate and a \"arr\", and returns a new array of the\n * same type containing the members of the given arr which do not satisfy the\n * given predicate.\n *\n * @param {Function} fn - predicate\n * @param {Array} arr\n * @return {Array}\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      reject(isEven, [1, 2, 3, 4]); //=> [1, 3]\n */\nexport const reject = curryN(2, (fn, arr = []) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (!fn(arr[i], i, arr)) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n});\nexport default reject;\n//# sourceMappingURL=reject.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/reject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "reject",
    "memberof": "ts_temp/array/reject.js",
    "static": true,
    "longname": "ts_temp/array/reject.js~reject",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/reject",
    "importStyle": "{reject}",
    "description": "Takes a predicate and a \"arr\", and returns a new array of the\nsame type containing the members of the given arr which do not satisfy the\ngiven predicate.",
    "examples": [
      "\n     var isEven = n => n % 2 === 0;\n\n     reject(isEven, [1, 2, 3, 4]); //=> [1, 3]"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "predicate"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "ts_temp/array/remove.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Removes the sub-list of `list` starting at index `start` and containing\n * `count` elements. _Note that this is not destructive_: it returns a copy of\n * the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @param {Number} start The position to start removing elements\n * @param {Number} count The number of elements to remove\n * @param {Array} list The list to remove from\n * @example\n *\n *      remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n */\nexport const remove = curryN(3, (start, count, list) => {\n    const result = Array.prototype.slice.call(list, 0);\n    result.splice(start, count);\n    return result;\n});\nexport default remove;\n//# sourceMappingURL=remove.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/remove.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "remove",
    "memberof": "ts_temp/array/remove.js",
    "static": true,
    "longname": "ts_temp/array/remove.js~remove",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/remove",
    "importStyle": "{remove}",
    "description": "Removes the sub-list of `list` starting at index `start` and containing\n`count` elements. _Note that this is not destructive_: it returns a copy of\nthe list with the changes.\n<small>No lists have been harmed in the application of this function.</small>",
    "examples": [
      "\n     remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The position to start removing elements"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "The number of elements to remove"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The list to remove from"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "ts_temp/array/repeat.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns a fixed list of size `n` containing a specified identical value.\n *\n * @param {Number} n The desired size of the output list.\n * @param {*} value The value to repeat.\n * @return {Array} A new array containing `n` `value`s.\n * @example\n *\n *      repeat(5, 'hi'); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n *\n *      var obj = {};\n *      var repeatedObjs = repeat(5, obj); //=> [{}, {}, {}, {}, {}]\n *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n */\nexport const repeat = curryN(2, (n = 0, value) => {\n    const result = new Array(n);\n    for (let i = 0; i < n; i++) {\n        result[i] = value;\n    }\n    return result;\n});\nexport default repeat;\n//# sourceMappingURL=repeat.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/repeat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "repeat",
    "memberof": "ts_temp/array/repeat.js",
    "static": true,
    "longname": "ts_temp/array/repeat.js~repeat",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/repeat",
    "importStyle": "{repeat}",
    "description": "Returns a fixed list of size `n` containing a specified identical value.",
    "examples": [
      "\n     repeat(5, 'hi'); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n\n     var obj = {};\n     var repeatedObjs = repeat(5, obj); //=> [{}, {}, {}, {}, {}]\n     repeatedObjs[0] === repeatedObjs[1]; //=> true"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The desired size of the output list."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to repeat."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A new array containing `n` `value`s."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "ts_temp/array/reverse.js",
    "content": "import isString from '../is/string';\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      reverse([1, 2]);     //=> [2, 1]\n *      reverse([1]);        //=> [1]\n *      reverse([]);         //=> []\n *\n *      reverse('abc');      //=> 'cba'\n *      reverse('ab');       //=> 'ba'\n *      reverse('a');        //=> 'a'\n *      reverse('');         //=> ''\n */\nexport const reverse = ((list) => isString(list)\n    ? list\n        .split('')\n        .reverse()\n        .join('')\n    : Array.prototype.slice.call(list, 0).reverse());\nexport default reverse;\n//# sourceMappingURL=reverse.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/reverse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "reverse",
    "memberof": "ts_temp/array/reverse.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/reverse.js~reverse",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/reverse",
    "importStyle": "{reverse}",
    "description": "Returns a new list or string with the elements or characters in reverse\norder.",
    "examples": [
      "\n     reverse([1, 2, 3]);  //=> [3, 2, 1]\n     reverse([1, 2]);     //=> [2, 1]\n     reverse([1]);        //=> [1]\n     reverse([]);         //=> []\n\n     reverse('abc');      //=> 'cba'\n     reverse('ab');       //=> 'ba'\n     reverse('a');        //=> 'a'\n     reverse('');         //=> ''"
    ],
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array",
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "ts_temp/array/shuffle.js",
    "content": "/**\n * Creates an array of shuffled values\n *\n * @param {Array} arr The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * shuffle([1, 2, 3, 4]); // => [4, 1, 3, 2]\n */\nexport const shuffle = (arr = []) => {\n    const len = arr.length;\n    const result = new Array(len);\n    for (let i = 0; i < len; i++) {\n        const rand = Math.floor(Math.random() * (i + 1));\n        if (rand !== i) {\n            result[i] = result[rand];\n        }\n        result[rand] = arr[i];\n    }\n    return result;\n};\nexport default shuffle;\n//# sourceMappingURL=shuffle.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/shuffle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "shuffle",
    "memberof": "ts_temp/array/shuffle.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/shuffle.js~shuffle",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/shuffle",
    "importStyle": "{shuffle}",
    "description": "Creates an array of shuffled values",
    "examples": [
      "\nshuffle([1, 2, 3, 4]); // => [4, 1, 3, 2]"
    ],
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Returns the new shuffled array."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The collection to shuffle."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Returns the new shuffled array."
    }
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "ts_temp/array/slice.js",
    "content": "import curryN from '../function/curryN';\nimport isString from '../is/string';\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {Array | String} list\n * @return {Array | String}\n * @example\n *\n *      slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n */\nexport const slice = curryN(3, (fromIndex, toIndex, list = []) => isString(list) ? list.slice(fromIndex, toIndex) : Array.prototype.slice.call(list, fromIndex, toIndex));\nexport default slice;\n//# sourceMappingURL=slice.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/slice.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "slice",
    "memberof": "ts_temp/array/slice.js",
    "static": true,
    "longname": "ts_temp/array/slice.js~slice",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/slice",
    "importStyle": "{slice}",
    "description": "Returns the elements of the given list or string (or object with a `slice`\nmethod) from `fromIndex` (inclusive) to `toIndex` (exclusive).",
    "examples": [
      "\n     slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n     slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n     slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n     slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']"
    ],
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fromIndex",
        "description": "The start index (inclusive)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "toIndex",
        "description": "The end index (exclusive)."
      },
      {
        "nullable": null,
        "types": [
          "Array ",
          " String"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array ",
        " String"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "ts_temp/array/sort.js",
    "content": "import curryN from '../function/curryN';\nconst defaultComparator = (a, b) => a - b;\n/**\n * Returns a copy of the array, sorted according to the comparator function,\n * which should accept two values at a time and return a negative number if the\n * first value is smaller, a positive number if it's larger, and zero if they\n * are equal. Please note that this is a **copy** of the list. It does not\n * modify the original.\n *\n * @param {Function} comparator A sorting function\n * @param {Array} arr The list to sort\n * @return {Array} a new array with its elements sorted by the comparator function.\n * @example\n *\n *      var diff = function(a, b) { return a - b; };\n *      sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n */\nexport const sort = curryN(2, (comparator = defaultComparator, arr = []) => {\n    const newArray = Array.prototype.slice.call(arr);\n    return newArray.sort(comparator);\n});\nexport default sort;\n//# sourceMappingURL=sort.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/sort.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "defaultComparator",
    "memberof": "ts_temp/array/sort.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/sort.js~defaultComparator",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/array/sort",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "sort",
    "memberof": "ts_temp/array/sort.js",
    "static": true,
    "longname": "ts_temp/array/sort.js~sort",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/sort",
    "importStyle": "{sort}",
    "description": "Returns a copy of the array, sorted according to the comparator function,\nwhich should accept two values at a time and return a negative number if the\nfirst value is smaller, a positive number if it's larger, and zero if they\nare equal. Please note that this is a **copy** of the list. It does not\nmodify the original.",
    "examples": [
      "\n     var diff = function(a, b) { return a - b; };\n     sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]"
    ],
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "comparator",
        "description": "A sorting function"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The list to sort"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "a new array with its elements sorted by the comparator function."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "ts_temp/array/sortBy.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Sorts the array according to the supplied function.\n *\n * @param {Function} fn\n * @param {Array} arr The array to sort.\n * @return {Array} A new array sorted by the keys generated by `fn`.\n * @example\n *\n *      var sortByFirstItem = sortBy(x => x[0]);\n *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n */\nexport const sortBy = curryN(2, (fn, arr = []) => {\n    const newArray = Array.prototype.slice.call(arr);\n    return newArray.sort((a, b) => {\n        const x = fn(a);\n        const y = fn(b);\n        if (x < y) {\n            return -1;\n        }\n        else if (x > y) {\n            return 1;\n        }\n        return 0;\n    });\n});\nexport default sortBy;\n//# sourceMappingURL=sortBy.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/sortBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "sortBy",
    "memberof": "ts_temp/array/sortBy.js",
    "static": true,
    "longname": "ts_temp/array/sortBy.js~sortBy",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/sortBy",
    "importStyle": "{sortBy}",
    "description": "Sorts the array according to the supplied function.",
    "examples": [
      "\n     var sortByFirstItem = sortBy(x => x[0]);\n     var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n     sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to sort."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A new array sorted by the keys generated by `fn`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "ts_temp/array/splitEvery.js",
    "content": "import curryN from '../function/curryN';\nimport slice from './slice';\n/**\n * Splits a collection into slices of the specified length\n *\n * @param {Number} length desired length of slices\n * @param {Array|String} arr a collection to split\n * @return {Array[]|String[]}\n * @example\n *      splitEvery(2, [1, 2, 3, 4, 5]); // => [[1, 2], [3, 4], [5]]\n */\nexport const splitEvery = curryN(2, (length, arr = []) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i += length) {\n        result.push(slice(i, i + length, arr));\n    }\n    return result;\n});\nexport default splitEvery;\n//# sourceMappingURL=splitEvery.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/splitEvery.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "splitEvery",
    "memberof": "ts_temp/array/splitEvery.js",
    "static": true,
    "longname": "ts_temp/array/splitEvery.js~splitEvery",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/splitEvery",
    "importStyle": "{splitEvery}",
    "description": "Splits a collection into slices of the specified length",
    "examples": [
      "     splitEvery(2, [1, 2, 3, 4, 5]); // => [[1, 2], [3, 4], [5]]"
    ],
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "desired length of slices"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "a collection to split"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array[]",
        "String[]"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "ts_temp/array/stableSortBy.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Sorts the array according to the supplied function and keeping the order of elements.\n *\n * @param {Function} fn\n * @param {Array} arr The array to sort.\n * @return {Array} A new array sorted by the keys generated by `fn`.\n * @example\n *\n *      const people = [\n *          { name: 'Ann', age: 20 },\n *          { name: 'Gary', age: 20 },\n *          { name: 'John', age: 17 },\n *          { name: 'Sam', age: 21 },\n *          { name: 'Bob', age: 17 }\n *      ];\n *      stableSortBy(path(['age']), people) => [\n *          { name: 'John', age: 17 },\n *          { name: 'Bob', age: 17 },\n *          { name: 'Ann', age: 20 },\n *          { name: 'Gary', age: 20 },\n *          { name: 'Sam', age: 21 }\n *      ]\n */\nexport const stableSortBy = curryN(2, (fn, arr = []) => {\n    const len = arr.length;\n    const indexes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        indexes[i] = i;\n    }\n    indexes.sort((a, b) => {\n        const valueA = arr[a];\n        const valueB = arr[b];\n        const x = fn(valueA);\n        const y = fn(valueB);\n        if (x < y) {\n            return -1;\n        }\n        else if (x > y) {\n            return 1;\n        }\n        return a - b;\n    });\n    const result = new Array(len);\n    for (let i = 0; i < len; i++) {\n        result[i] = arr[indexes[i]];\n    }\n    return result;\n});\nexport default stableSortBy;\n//# sourceMappingURL=stableSortBy.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/stableSortBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "stableSortBy",
    "memberof": "ts_temp/array/stableSortBy.js",
    "static": true,
    "longname": "ts_temp/array/stableSortBy.js~stableSortBy",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/stableSortBy",
    "importStyle": "{stableSortBy}",
    "description": "Sorts the array according to the supplied function and keeping the order of elements.",
    "examples": [
      "\n     const people = [\n         { name: 'Ann', age: 20 },\n         { name: 'Gary', age: 20 },\n         { name: 'John', age: 17 },\n         { name: 'Sam', age: 21 },\n         { name: 'Bob', age: 17 }\n     ];\n     stableSortBy(path(['age']), people) => [\n         { name: 'John', age: 17 },\n         { name: 'Bob', age: 17 },\n         { name: 'Ann', age: 20 },\n         { name: 'Gary', age: 20 },\n         { name: 'Sam', age: 21 }\n     ]"
    ],
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to sort."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A new array sorted by the keys generated by `fn`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "ts_temp/array/sum.js",
    "content": "/**\n * Adds together all the elements of a list.\n *\n * @param {Array} arr An array of numbers\n * @return {Number} The sum of all the numbers in the list.\n * @example\n *\n *      sum([2,4,6,8,100,1]); //=> 121\n */\nexport const sum = (arr = []) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n};\nexport default sum;\n//# sourceMappingURL=sum.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/sum.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "sum",
    "memberof": "ts_temp/array/sum.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/sum.js~sum",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/sum",
    "importStyle": "{sum}",
    "description": "Adds together all the elements of a list.",
    "examples": [
      "\n     sum([2,4,6,8,100,1]); //=> 121"
    ],
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "An array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The sum of all the numbers in the list."
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "ts_temp/array/tail.js",
    "content": "import slice from './slice';\n/**\n * Returns all but the first element of the given array.\n *\n * @param {Array} arr\n * @return {*}\n * @example\n *\n *      tail(['fi', 'fo', 'fum']); //=> ['fo', 'fum']\n *      tail([]); //=> []\n */\nexport const tail = ((arr) => slice(1, arr.length, arr));\nexport default tail;\n//# sourceMappingURL=tail.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/tail.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "tail",
    "memberof": "ts_temp/array/tail.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/tail.js~tail",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/tail",
    "importStyle": "{tail}",
    "description": "Returns all but the first element of the given array.",
    "examples": [
      "\n     tail(['fi', 'fo', 'fum']); //=> ['fo', 'fum']\n     tail([]); //=> []"
    ],
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "ts_temp/array/take.js",
    "content": "import curryN from '../function/curryN';\nimport slice from './slice';\n/**\n * Returns the first `n` elements of the given array or string\n *\n * @param {Number} n\n * @param {Array|String} arr\n * @return {*}\n * @example\n *\n *      take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      take(3, 'ramda');               //=> 'ram'\n */\nexport const take = curryN(2, (n, arr = []) => slice(0, n, arr));\nexport default take;\n//# sourceMappingURL=take.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/take.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "take",
    "memberof": "ts_temp/array/take.js",
    "static": true,
    "longname": "ts_temp/array/take.js~take",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/take",
    "importStyle": "{take}",
    "description": "Returns the first `n` elements of the given array or string",
    "examples": [
      "\n     take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n     take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     take(3, 'ramda');               //=> 'ram'"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "ts_temp/array/takeRightWhile.js",
    "content": "import curryN from '../function/curryN';\nimport slice from './slice';\n/**\n * Returns a new array|string containing the last `n` elements of a given array|string, passing\n * each value to the supplied predicate function, and terminating when the\n * predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail.\n *\n * @param {Function} fn The function called per iteration.\n * @param {Array|String} arr The collection to iterate over.\n * @return {Array|String} A new array or string.\n * @example\n *\n *      var isNotOne = x => x !== 1;\n *\n *      takeRightWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n */\nexport const takeRightWhile = curryN(2, (fn, arr = []) => {\n    let i = arr.length - 1;\n    while (i >= 0 && fn(arr[i], i, arr)) {\n        i -= 1;\n    }\n    return slice(i + 1, arr.length, arr);\n});\nexport default takeRightWhile;\n//# sourceMappingURL=takeRightWhile.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/takeRightWhile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "takeRightWhile",
    "memberof": "ts_temp/array/takeRightWhile.js",
    "static": true,
    "longname": "ts_temp/array/takeRightWhile.js~takeRightWhile",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/takeRightWhile",
    "importStyle": "{takeRightWhile}",
    "description": "Returns a new array|string containing the last `n` elements of a given array|string, passing\neach value to the supplied predicate function, and terminating when the\npredicate function returns `false`. Excludes the element that caused the\npredicate function to fail.",
    "examples": [
      "\n     var isNotOne = x => x !== 1;\n\n     takeRightWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]"
    ],
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function called per iteration."
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The collection to iterate over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array",
        "String"
      ],
      "spread": false,
      "description": "A new array or string."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "ts_temp/array/toArray.js",
    "content": "import isArray from '../is/array';\nimport isArrayLike from '../is/arrayLike';\n/**\n * Converts val to array. If val is array return it.\n * @param {*} val\n * @return {Array}\n * @example\n *\n *      toArray([1,2,3]) // => [1,2,3]\n *      toArray(5) // => [5]\n *      toArray('test') // => ['test']\n *      toArray(['test']) // => ['test']\n *      toArray(null) // => []\n *      toArray(undefined) // => []\n */\nexport const toArray = ((val) => {\n    if (val == null) {\n        return [];\n    }\n    if (isArray(val)) {\n        return val;\n    }\n    if (typeof val === 'string') {\n        return [val];\n    }\n    if (typeof val[Symbol.iterator] === 'function') {\n        return [...val];\n    }\n    if (isArrayLike(val)) {\n        return Array.prototype.slice.call(val);\n    }\n    return [val];\n});\nexport default toArray;\n//# sourceMappingURL=toArray.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/toArray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "toArray",
    "memberof": "ts_temp/array/toArray.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/toArray.js~toArray",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/toArray",
    "importStyle": "{toArray}",
    "description": "Converts val to array. If val is array return it.",
    "examples": [
      "\n     toArray([1,2,3]) // => [1,2,3]\n     toArray(5) // => [5]\n     toArray('test') // => ['test']\n     toArray(['test']) // => ['test']\n     toArray(null) // => []\n     toArray(undefined) // => []"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "ts_temp/array/uniq.js",
    "content": "/**\n * Returns unique items in array\n *\n * @param {Array} arr\n * @return {Array}\n *\n * @example\n *\n *  unique([1,2,1,2,3,4,1,2]) // => [1, 2, 3, 4]\n */\nexport const uniq = ((arr = []) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (result.indexOf(arr[i]) === -1) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n});\nexport default uniq;\n//# sourceMappingURL=uniq.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/uniq.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "uniq",
    "memberof": "ts_temp/array/uniq.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/array/uniq.js~uniq",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/uniq",
    "importStyle": "{uniq}",
    "description": "Returns unique items in array",
    "examples": [
      "\n unique([1,2,1,2,3,4,1,2]) // => [1, 2, 3, 4]"
    ],
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "ts_temp/array/uniqBy.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns unique items in array. Uniqueness is defined by `fn`.\n *\n * @param {Function} fn\n * @param {Array} arr\n * @return {Array}\n *\n * @example\n *\n *      uniqBy(x => x % 2, [1, 2, 2, 3, 4, 5, 5, 5]) // [1, 2]\n */\nexport const uniqBy = curryN(2, (fn, arr = []) => {\n    const result = [];\n    const unq = Object.create(null);\n    for (let i = 0; i < arr.length; i++) {\n        const key = fn(arr[i]);\n        if (!unq[key]) {\n            result.push(arr[i]);\n            unq[key] = true;\n        }\n    }\n    return result;\n});\nexport default uniqBy;\n//# sourceMappingURL=uniqBy.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/uniqBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "uniqBy",
    "memberof": "ts_temp/array/uniqBy.js",
    "static": true,
    "longname": "ts_temp/array/uniqBy.js~uniqBy",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/uniqBy",
    "importStyle": "{uniqBy}",
    "description": "Returns unique items in array. Uniqueness is defined by `fn`.",
    "examples": [
      "\n     uniqBy(x => x % 2, [1, 2, 2, 3, 4, 5, 5, 5]) // [1, 2]"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "ts_temp/array/update.js",
    "content": "import adjust from './adjust';\nimport curryN from '../function/curryN';\nimport always from '../function/always';\n/**\n * Returns a new copy of the array with the element at the provided index\n * replaced with the given value.\n *\n * @param {Number} idx index\n * @param {*} x The value to exist at the given index of the returned array.\n * @param {Array} list The source array to be updated.\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n * @example\n *\n *      update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n *      update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n */\nexport const update = curryN(3, (idx, x, list) => adjust(always(x), idx, list));\nexport default update;\n//# sourceMappingURL=update.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/update.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "update",
    "memberof": "ts_temp/array/update.js",
    "static": true,
    "longname": "ts_temp/array/update.js~update",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/update",
    "importStyle": "{update}",
    "description": "Returns a new copy of the array with the element at the provided index\nreplaced with the given value.",
    "examples": [
      "\n     update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n     update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": "index"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The value to exist at the given index of the returned array."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The source array to be updated."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A copy of `list` with the value at index `idx` replaced with `x`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "ts_temp/array/without.js",
    "content": "import curryN from '../function/curryN';\nimport difference from './difference';\n/**\n * Returns a new list without values in the first argument.\n *\n * @deprecated use array/difference instead\n * @param {Array} xs The values to be removed from `list2`.\n * @param {Array} list The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @example\n *\n *      without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\nexport const without = curryN(2, (xs, list) => difference(list, xs));\nexport default without;\n//# sourceMappingURL=without.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/without.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "without",
    "memberof": "ts_temp/array/without.js",
    "static": true,
    "longname": "ts_temp/array/without.js~without",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/without",
    "importStyle": "{without}",
    "description": "Returns a new list without values in the first argument.",
    "examples": [
      "\n     without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]"
    ],
    "lineNumber": 14,
    "deprecated": "use array/difference instead",
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "xs",
        "description": "The values to be removed from `list2`."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The array to remove values from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The new array without values in `list1`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "ts_temp/array/zip.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Creates a new list out of the two supplied by pairing up equally-positioned\n * items from both lists. The returned list is truncated to the length of the\n * shorter of the two input lists.\n *\n * @param {Array} a The first array to consider.\n * @param {Array} b The second array to consider.\n * @return {Array} The list made by pairing up same-indexed elements of `a` and `b`.\n * @example\n *\n *      zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n */\nexport const zip = curryN(2, (a = [], b = []) => {\n    const len = Math.min(a.length, b.length);\n    const result = new Array(len);\n    for (let i = 0; i < len; i++) {\n        result[i] = [a[i], b[i]];\n    }\n    return result;\n});\nexport default zip;\n//# sourceMappingURL=zip.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/zip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "zip",
    "memberof": "ts_temp/array/zip.js",
    "static": true,
    "longname": "ts_temp/array/zip.js~zip",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/zip",
    "importStyle": "{zip}",
    "description": "Creates a new list out of the two supplied by pairing up equally-positioned\nitems from both lists. The returned list is truncated to the length of the\nshorter of the two input lists.",
    "examples": [
      "\n     zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The first array to consider."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "The second array to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The list made by pairing up same-indexed elements of `a` and `b`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "ts_temp/array/zipWith.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Creates a new list out of the two supplied by applying the function to each\n * equally-positioned pair in the lists. The returned list is truncated to the\n * length of the shorter of the two input lists.\n *\n * @param {Function} fn The function used to combine the two elements into one value.\n * @param {Array} a The first array to consider.\n * @param {Array} b The second array to consider.\n * @return {Array} The list made by combining same-indexed elements of `a` and `b`\n *         using `fn`.\n * @example\n *\n *      var f = (x, y) => {\n *        // ...\n *      };\n *      zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n */\nexport const zipWith = curryN(3, (fn, a = [], b = []) => {\n    const len = Math.min(a.length, b.length);\n    const result = new Array(len);\n    for (let i = 0; i < len; i++) {\n        result[i] = fn(a[i], b[i]);\n    }\n    return result;\n});\nexport default zipWith;\n//# sourceMappingURL=zipWith.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/array/zipWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "zipWith",
    "memberof": "ts_temp/array/zipWith.js",
    "static": true,
    "longname": "ts_temp/array/zipWith.js~zipWith",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/array/zipWith",
    "importStyle": "{zipWith}",
    "description": "Creates a new list out of the two supplied by applying the function to each\nequally-positioned pair in the lists. The returned list is truncated to the\nlength of the shorter of the two input lists.",
    "examples": [
      "\n     var f = (x, y) => {\n       // ...\n     };\n     zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n     //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]"
    ],
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function used to combine the two elements into one value."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The first array to consider."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "The second array to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The list made by combining same-indexed elements of `a` and `b`\n        using `fn`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "ts_temp/assign.js",
    "content": "import isArray from './is/array';\n/**\n * Create a new object/array with the own properties of the first entry merged with\n * the own properties of the others objects. If a key exists in several objects,\n * the value from the last object will be used.\n *\n * **Note** if first argument is array then result of function is array,\n * otherwise it is an object.\n *\n * @param sources\n * @example\n *\n * assign({a:1}, {b:2}) // => {a:1, b:2}\n * assign([1,2,3], [4,5]) // => [4,5,3]\n */\nexport const assign = ((...sources) => {\n    if (isArray(sources[0])) {\n        return Object.assign([], ...sources);\n    }\n    return Object.assign({}, ...sources);\n});\nexport default assign;\n//# sourceMappingURL=assign.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/assign.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "assign",
    "memberof": "ts_temp/assign.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/assign.js~assign",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/assign",
    "importStyle": "{assign}",
    "description": "Create a new object/array with the own properties of the first entry merged with\nthe own properties of the others objects. If a key exists in several objects,\nthe value from the last object will be used.\n\n**Note** if first argument is array then result of function is array,\notherwise it is an object.",
    "examples": [
      "\nassign({a:1}, {b:2}) // => {a:1, b:2}\nassign([1,2,3], [4,5]) // => [4,5,3]"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "ts_temp/clone.js",
    "content": "import type from './type';\nimport mapObj from './object/map';\nimport mapArr from './array/map';\nimport isReactElement from './is/reactElement';\nimport isReactComponent from './is/reactComponent';\nconst cloneRegExp = (pattern) => new RegExp(pattern.source, (pattern.global ? 'g' : '') +\n    (pattern.ignoreCase ? 'i' : '') +\n    (pattern.multiline ? 'm' : '') +\n    (pattern.sticky ? 'y' : '') +\n    (pattern.unicode ? 'u' : ''));\n/**\n * Creates a deep copy of the value which may contain (nested) `Array`s and\n * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not\n * copied, but assigned by their reference.\n *\n * @param {*} x The value to clone\n * @return {*} A copy of a value.\n * @example\n *\n *      var objects = [{}, {}, {}];\n *      var objectsClone = clone(objects);\n *      objects[0] === objectsClone[0]; //=> false\n */\nexport const clone = (x) => {\n    switch (type(x)) {\n        case 'Object':\n            // Skip clone react object\n            if (isReactComponent(x) || isReactElement(x)) {\n                break;\n            }\n            else {\n                // @ts-ignore\n                return mapObj(clone, x);\n            }\n        case 'Array':\n            // @ts-ignore\n            return mapArr(clone, x);\n        case 'Date':\n            // @ts-ignore\n            return new Date(x.valueOf());\n        case 'RegExp':\n            // @ts-ignore\n            return cloneRegExp(x);\n    }\n    return x;\n};\nexport default clone;\n//# sourceMappingURL=clone.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/clone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "cloneRegExp",
    "memberof": "ts_temp/clone.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/clone.js~cloneRegExp",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/clone",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "clone",
    "memberof": "ts_temp/clone.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/clone.js~clone",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/clone",
    "importStyle": "{clone}",
    "description": "Creates a deep copy of the value which may contain (nested) `Array`s and\n`Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not\ncopied, but assigned by their reference.",
    "examples": [
      "\n     var objects = [{}, {}, {}];\n     var objectsClone = clone(objects);\n     objects[0] === objectsClone[0]; //=> false"
    ],
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The value to clone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A copy of a value."
    }
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "ts_temp/defaultTo.js",
    "content": "import curryN from './function/curryN';\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`\n * otherwise the first argument is returned.\n *\n * @param {a} dflt The default value.\n * @param {b} x The value to return if it is not null or undefined\n * @return {*} The the second value or the default value\n * @example\n *\n *      var defaultTo42 = defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42('Example');  //=> 'Example'\n *      defaultTo42(parseInt('string')); //=> 42\n */\nexport const defaultTo = curryN(2, (dflt, x) => {\n    if (x == null || x !== x) {\n        // eslint-disable-line no-self-compare\n        return dflt;\n    }\n    return x;\n});\nexport default defaultTo;\n//# sourceMappingURL=defaultTo.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/defaultTo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "defaultTo",
    "memberof": "ts_temp/defaultTo.js",
    "static": true,
    "longname": "ts_temp/defaultTo.js~defaultTo",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/defaultTo",
    "importStyle": "{defaultTo}",
    "description": "Returns the second argument if it is not `null`, `undefined` or `NaN`\notherwise the first argument is returned.",
    "examples": [
      "\n     var defaultTo42 = defaultTo(42);\n\n     defaultTo42(null);  //=> 42\n     defaultTo42(undefined);  //=> 42\n     defaultTo42('Example');  //=> 'Example'\n     defaultTo42(parseInt('string')); //=> 42"
    ],
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "a"
        ],
        "spread": false,
        "optional": false,
        "name": "dflt",
        "description": "The default value."
      },
      {
        "nullable": null,
        "types": [
          "b"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The value to return if it is not null or undefined"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The the second value or the default value"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "ts_temp/function/F.js",
    "content": "/**\n * A function that always returns `false`. Any passed in parameters are ignored.\n *\n * @return {Boolean}\n * @example\n *\n *      F(); //=> false\n */\nexport const F = (() => false);\nexport default F;\n//# sourceMappingURL=F.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/F.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "F",
    "memberof": "ts_temp/function/F.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/F.js~F",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/F",
    "importStyle": "{F}",
    "description": "A function that always returns `false`. Any passed in parameters are ignored.",
    "examples": [
      "\n     F(); //=> false"
    ],
    "lineNumber": 9,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "ts_temp/function/T.js",
    "content": "/**\n * A function that always returns `true`. Any passed in parameters are ignored.\n *\n * @return {Boolean}\n * @example\n *\n *      T(); //=> true\n */\nexport const T = (() => true);\nexport default T;\n//# sourceMappingURL=T.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/T.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "T",
    "memberof": "ts_temp/function/T.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/T.js~T",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/T",
    "importStyle": "{T}",
    "description": "A function that always returns `true`. Any passed in parameters are ignored.",
    "examples": [
      "\n     T(); //=> true"
    ],
    "lineNumber": 9,
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "ts_temp/function/allPass.js",
    "content": "import curryN from './curryN';\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if every one of the provided predicates is satisfied\n * by those arguments.\n *\n * @param {Array} fns predicates\n * @param {...*} args passed arguments to predicates\n * @return {Function}\n * @example\n *\n *      var isQueen = propEq('rank', 'Q');\n *      var isSpade = propEq('suit', '♠︎');\n *      var isQueenOfSpades = allPass([isQueen, isSpade]);\n *\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n */\nexport const allPass = curryN(2, (fns, ...args) => {\n    for (let i = 0; i < fns.length; i++) {\n        if (!fns[i](...args)) {\n            return false;\n        }\n    }\n    return true;\n});\nexport default allPass;\n//# sourceMappingURL=allPass.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/allPass.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "allPass",
    "memberof": "ts_temp/function/allPass.js",
    "static": true,
    "longname": "ts_temp/function/allPass.js~allPass",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/allPass",
    "importStyle": "{allPass}",
    "description": "Takes a list of predicates and returns a predicate that returns true for a\ngiven list of arguments if every one of the provided predicates is satisfied\nby those arguments.",
    "examples": [
      "\n     var isQueen = propEq('rank', 'Q');\n     var isSpade = propEq('suit', '♠︎');\n     var isQueenOfSpades = allPass([isQueen, isSpade]);\n\n     isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n     isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fns",
        "description": "predicates"
      },
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "passed arguments to predicates"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "ts_temp/function/always.js",
    "content": "/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * @param {*} x The value to wrap in a function\n * @return {Function}\n * @example\n *\n *      var t = always('Tee');\n *      t(); //=> 'Tee'\n */\nexport const always = (x) => () => x;\nexport default always;\n//# sourceMappingURL=always.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/always.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "always",
    "memberof": "ts_temp/function/always.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/always.js~always",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/always",
    "importStyle": "{always}",
    "description": "Returns a function that always returns the given value. Note that for\nnon-primitives the value returned is a reference to the original value.",
    "examples": [
      "\n     var t = always('Tee');\n     t(); //=> 'Tee'"
    ],
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The value to wrap in a function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "ts_temp/function/anyPass.js",
    "content": "import curryN from './curryN';\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if at least one of the provided predicates is satisfied\n * by those arguments.\n *\n * @param {Array} fns predicates\n * @param {...*} args passed arguments to predicates\n * @return {Function}\n * @example\n *\n *      var isClub = propEq('rank', '♣');\n *      var isSpade = propEq('suit', '♠︎');\n *      var isBlackCard = anyPass([isClub, isSpade]);\n *\n *      isBlackCard({rank: '10', suit: '♣'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false\n */\nexport const anyPass = curryN(2, (fns, ...args) => {\n    for (let i = 0; i < fns.length; i++) {\n        if (fns[i](...args)) {\n            return true;\n        }\n    }\n    return false;\n});\nexport default anyPass;\n//# sourceMappingURL=anyPass.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/anyPass.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "anyPass",
    "memberof": "ts_temp/function/anyPass.js",
    "static": true,
    "longname": "ts_temp/function/anyPass.js~anyPass",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/anyPass",
    "importStyle": "{anyPass}",
    "description": "Takes a list of predicates and returns a predicate that returns true for a\ngiven list of arguments if at least one of the provided predicates is satisfied\nby those arguments.",
    "examples": [
      "\n     var isClub = propEq('rank', '♣');\n     var isSpade = propEq('suit', '♠︎');\n     var isBlackCard = anyPass([isClub, isSpade]);\n\n     isBlackCard({rank: '10', suit: '♣'}); //=> true\n     isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n     isBlackCard({rank: 'Q', suit: '♦'}); //=> false"
    ],
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fns",
        "description": "predicates"
      },
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "passed arguments to predicates"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "ts_temp/function/applyOrReturn.js",
    "content": "import curryN from './curryN';\n/**\n * If `test` is function it calls with applied first argument, otherwise just returns `test`\n *\n * @param {Array} args Arguments passed to `test` if it's a function\n * @param {*} test if `test` is function it's called with `args`\n * @return {*}\n * @example\n *\n *      applyOrReturn([1,2,3], (...args) => args) // => [1,2,3]\n *      applyOrReturn([1,2,3], 'test') // => 'test'\n */\nexport const applyOrReturn = curryN(2, (args, test) => {\n    if (typeof test === 'function') {\n        return test(...args);\n    }\n    return test;\n});\nexport default applyOrReturn;\n//# sourceMappingURL=applyOrReturn.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/applyOrReturn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "name": "applyOrReturn",
    "memberof": "ts_temp/function/applyOrReturn.js",
    "static": true,
    "longname": "ts_temp/function/applyOrReturn.js~applyOrReturn",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/applyOrReturn",
    "importStyle": "{applyOrReturn}",
    "description": "If `test` is function it calls with applied first argument, otherwise just returns `test`",
    "examples": [
      "\n     applyOrReturn([1,2,3], (...args) => args) // => [1,2,3]\n     applyOrReturn([1,2,3], 'test') // => 'test'"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Arguments passed to `test` if it's a function"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "if `test` is function it's called with `args`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "ts_temp/function/arity.js",
    "content": "export function arity(n, fn) {\n    /* eslint-disable no-unused-vars */\n    switch (n) {\n        case 0: return function () { return fn.apply(this, arguments); };\n        case 1: return function (a0) { return fn.apply(this, arguments); };\n        case 2: return function (a0, a1) { return fn.apply(this, arguments); };\n        case 3: return function (a0, a1, a2) { return fn.apply(this, arguments); };\n        case 4: return function (a0, a1, a2, a3) { return fn.apply(this, arguments); };\n        case 5: return function (a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n        case 6: return function (a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n        case 7: return function (a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n        case 8: return function (a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n        case 9: return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n        case 10: return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n        default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n    }\n}\nexport default arity;\n//# sourceMappingURL=arity.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/arity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "arity",
    "memberof": "ts_temp/function/arity.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/arity.js~arity",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/arity",
    "importStyle": "{arity}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      },
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "ts_temp/function/both.js",
    "content": "import curryN from './curryN';\n/**\n * A function wrapping calls to the two functions in an `&&` operation,\n * returning the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @example\n *\n *      var gt10 = x => x > 10;\n *      var even = x => x % 2 === 0;\n *      var f = both(gt10, even);\n *      f(100); //=> true\n *      f(101); //=> false\n */\nexport const both = curryN(2, (f, g) => (...args) => f(...args) && g(...args));\nexport default both;\n//# sourceMappingURL=both.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/both.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "both",
    "memberof": "ts_temp/function/both.js",
    "static": true,
    "longname": "ts_temp/function/both.js~both",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/both",
    "importStyle": "{both}",
    "description": "A function wrapping calls to the two functions in an `&&` operation,\nreturning the result of the first function if it is false-y and the result\nof the second function otherwise. Note that this is short-circuited,\nmeaning that the second function will not be invoked if the first returns a\nfalse-y value.",
    "examples": [
      "\n     var gt10 = x => x > 10;\n     var even = x => x % 2 === 0;\n     var f = both(gt10, even);\n     f(100); //=> true\n     f(101); //=> false"
    ],
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "a predicate"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "another predicate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "a function that applies its arguments to `f` and `g` and `&&`s their outputs together."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "ts_temp/function/comparator.js",
    "content": "/**\n * Makes a comparator function out of a function that reports whether the first\n * element is less than the second.\n *\n * @param {Function} pred A predicate function of arity two which will return `true` if the first argument\n * is less than the second, `false` otherwise\n * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\n * @example\n *\n *      var byAge = comparator((a, b) => a.age < b.age);\n *      var people = [\n *        // ...\n *      ];\n *      var peopleByIncreasingAge = sort(byAge, people);\n */\nexport const comparator = ((pred) => {\n    return (a, b) => {\n        if (pred(a, b)) {\n            return -1;\n        }\n        return pred(b, a) ? 1 : 0;\n    };\n});\nexport default comparator;\n//# sourceMappingURL=comparator.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/comparator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "comparator",
    "memberof": "ts_temp/function/comparator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/comparator.js~comparator",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/comparator",
    "importStyle": "{comparator}",
    "description": "Makes a comparator function out of a function that reports whether the first\nelement is less than the second.",
    "examples": [
      "\n     var byAge = comparator((a, b) => a.age < b.age);\n     var people = [\n       // ...\n     ];\n     var peopleByIncreasingAge = sort(byAge, people);"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pred",
        "description": "A predicate function of arity two which will return `true` if the first argument\nis less than the second, `false` otherwise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`"
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "ts_temp/function/complement.js",
    "content": "/**\n * Takes a function `f` and returns a function `g` such that if called with the same arguments\n * when `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\n *\n * @param {Function} fn\n * @return {Function}\n * @example\n *\n *      var isNotNil = complement(isNil);\n *      isNil(null); //=> true\n *      isNotNil(null); //=> false\n *      isNil(7); //=> false\n *      isNotNil(7); //=> true\n */\nexport const complement = ((fn) => (...args) => !fn(...args));\nexport default complement;\n//# sourceMappingURL=complement.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/complement.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "complement",
    "memberof": "ts_temp/function/complement.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/complement.js~complement",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/complement",
    "importStyle": "{complement}",
    "description": "Takes a function `f` and returns a function `g` such that if called with the same arguments\nwhen `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.",
    "examples": [
      "\n     var isNotNil = complement(isNil);\n     isNil(null); //=> true\n     isNotNil(null); //=> false\n     isNil(7); //=> false\n     isNotNil(7); //=> true"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "ts_temp/function/compose.js",
    "content": "/**\n * Performs right-to-left function composition. The rightmost function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @param {...Function} fns\n * @return {Function}\n * @example\n *\n *      var f = compose(x => x + 1, x => -x, Math.pow);\n *\n *      f(3, 4); // -(3^4) + 1\n */\nexport const compose = ((...fns) => (...args) => {\n    const n = fns.length - 1;\n    let result = fns[n](...args);\n    for (let i = n - 1; i >= 0; i--) {\n        result = fns[i](result);\n    }\n    return result;\n});\nexport default compose;\n//# sourceMappingURL=compose.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/compose.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "compose",
    "memberof": "ts_temp/function/compose.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/compose.js~compose",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/compose",
    "importStyle": "{compose}",
    "description": "Performs right-to-left function composition. The rightmost function may have\nany arity; the remaining functions must be unary.\n\n**Note:** The result of compose is not automatically curried.",
    "examples": [
      "\n     var f = compose(x => x + 1, x => -x, Math.pow);\n\n     f(3, 4); // -(3^4) + 1"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "fns",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "ts_temp/function/composeP.js",
    "content": "function arity2(b, a) {\n    return (...args) => a(...args).then(b);\n}\nfunction arity3(c, b, a) {\n    return (...args) => a(...args)\n        .then(b)\n        .then(c);\n}\nfunction arity4(d, c, b, a) {\n    // eslint-disable-line max-params\n    return (...args) => a(...args)\n        .then(b)\n        .then(c)\n        .then(d);\n}\n/**\n * Performs right-to-left composition of Promise-returning functions.\n * The rightmost function may have any arity; the remaining functions must be unary.\n *\n * **Note:** **ALL** of the chained functions must return a Promise.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @param {...Function} chain\n * @return {Function}\n * @example\n *      var res = x => Promise.resolve(x);\n *      var f = composeP(x => res(-x), (x, y) => res(Math.pow(x, y)));\n *      f(3, 4).then(console.log); // -(3^4)\n */\nexport function composeP(...chain) {\n    switch (chain.length) {\n        case 0:\n            throw new Error('composeP requires at least one argument');\n        case 1:\n            return chain[0];\n        case 2:\n            return arity2(chain[0], chain[1]);\n        case 3:\n            return arity3(chain[0], chain[1], chain[2]);\n        case 4:\n            return arity4(chain[0], chain[1], chain[2], chain[3]);\n        default:\n            return composeP(composeP(...chain.slice(0, 4)), composeP(...chain.slice(4)));\n    }\n}\n;\nexport default composeP;\n//# sourceMappingURL=composeP.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/composeP.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "arity2",
    "memberof": "ts_temp/function/composeP.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/composeP.js~arity2",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/function/composeP",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "arity3",
    "memberof": "ts_temp/function/composeP.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/composeP.js~arity3",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/function/composeP",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "arity4",
    "memberof": "ts_temp/function/composeP.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/composeP.js~arity4",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/function/composeP",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "composeP",
    "memberof": "ts_temp/function/composeP.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/composeP.js~composeP",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/composeP",
    "importStyle": "{composeP}",
    "description": "Performs right-to-left composition of Promise-returning functions.\nThe rightmost function may have any arity; the remaining functions must be unary.\n\n**Note:** **ALL** of the chained functions must return a Promise.\n\n**Note:** The result of compose is not automatically curried.",
    "examples": [
      "     var res = x => Promise.resolve(x);\n     var f = composeP(x => res(-x), (x, y) => res(Math.pow(x, y)));\n     f(3, 4).then(console.log); // -(3^4)"
    ],
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "chain",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "ts_temp/function/cond.js",
    "content": "/**\n * Returns a function, `fn`, which encapsulates if/else-if/else logic.\n * `cond` takes a list of [predicate, transform] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * @param {[Function, Function]} pairs\n * @return {Function}\n * @example\n *\n *      var fn = cond([\n *        [isEqual(0),   always('water freezes at 0°C')],\n *        [isEqual(100), always('water boils at 100°C')],\n *        [T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\nexport const cond = ((pairs) => function (...args) {\n    for (let i = 0; i < pairs.length; i++) {\n        if (pairs[i][0].apply(this, args)) {\n            return pairs[i][1].apply(this, args);\n        }\n    }\n});\nexport default cond;\n//# sourceMappingURL=cond.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/cond.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "cond",
    "memberof": "ts_temp/function/cond.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/cond.js~cond",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/cond",
    "importStyle": "{cond}",
    "description": "Returns a function, `fn`, which encapsulates if/else-if/else logic.\n`cond` takes a list of [predicate, transform] pairs. All of the arguments\nto `fn` are applied to each of the predicates in turn until one returns a\n\"truthy\" value, at which point `fn` returns the result of applying its\narguments to the corresponding transformer. If none of the predicates\nmatches, `fn` returns undefined.",
    "examples": [
      "\n     var fn = cond([\n       [isEqual(0),   always('water freezes at 0°C')],\n       [isEqual(100), always('water boils at 100°C')],\n       [T,           temp => 'nothing special happens at ' + temp + '°C']\n     ]);\n     fn(0); //=> 'water freezes at 0°C'\n     fn(50); //=> 'nothing special happens at 50°C'\n     fn(100); //=> 'water boils at 100°C'"
    ],
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "[Function, Function]"
        ],
        "spread": false,
        "optional": false,
        "name": "pairs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "ts_temp/function/converge.js",
    "content": "import curryN from './curryN';\nimport reduce from '../array/reduce';\nimport pluck from '../array/pluck';\nimport map from '../array/map';\n/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. The arity of the new function is the same as the arity of\n * the longest branching function. When invoked, this new function is applied\n * to some arguments, and each branching function is applied to those same\n * arguments. The results of each branching function are passed as arguments\n * to the converging function to produce the return value.\n *\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @example\n *\n *      const average = converge(divide, [sum, length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      const strangeConcat = converge(concat, [toUpper, toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */\nexport const converge = curryN(2, function converge(after, fns) {\n    // @ts-ignore\n    const maxNumArgs = reduce((a, b) => Math.max(a, b), 0, pluck('length', fns));\n    return curryN(maxNumArgs, function (...args) {\n        return after.apply(this, map(fn => fn.apply(this, args), fns));\n    });\n});\nexport default converge;\n//# sourceMappingURL=converge.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/converge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "name": "converge",
    "memberof": "ts_temp/function/converge.js",
    "static": true,
    "longname": "ts_temp/function/converge.js~converge",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/converge",
    "importStyle": "{converge}",
    "description": "Accepts a converging function and a list of branching functions and returns\na new function. The arity of the new function is the same as the arity of\nthe longest branching function. When invoked, this new function is applied\nto some arguments, and each branching function is applied to those same\narguments. The results of each branching function are passed as arguments\nto the converging function to produce the return value.",
    "examples": [
      "\n     const average = converge(divide, [sum, length])\n     average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n\n     const strangeConcat = converge(concat, [toUpper, toLower])\n     strangeConcat(\"Yodel\") //=> \"YODELyodel\""
    ],
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@sig",
        "tagValue": "((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)"
      },
      {
        "tagName": "@symb",
        "tagValue": "converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "after",
        "description": "A function. `after` will be invoked with the return values of\n       `fn1` and `fn2` as its arguments."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "functions",
        "description": "A list of functions."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "A new function."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "ts_temp/function/curry.js",
    "content": "import curryN from './curryN';\n/**\n * Returns a curried equivalent of the provided function. The arguments of curried function\n * needn't be provided one at a time. If `f` is a ternary function and `g` is `curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nexport const curry = ((fn) => curryN(fn.length, fn));\nexport default curry;\n//# sourceMappingURL=curry.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/curry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "curry",
    "memberof": "ts_temp/function/curry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/curry.js~curry",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/curry",
    "importStyle": "{curry}",
    "description": "Returns a curried equivalent of the provided function. The arguments of curried function\nneedn't be provided one at a time. If `f` is a ternary function and `g` is `curry(f)`, the\nfollowing are equivalent:\n\n  - `g(1)(2)(3)`\n  - `g(1)(2, 3)`\n  - `g(1, 2)(3)`\n  - `g(1, 2, 3)`",
    "examples": [
      "\n     var addFourNumbers = (a, b, c, d) => a + b + c + d;\n\n     var curriedAddFourNumbers = curry(addFourNumbers);\n     var f = curriedAddFourNumbers(1, 2);\n     var g = f(3);\n     g(4); //=> 10"
    ],
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to curry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "A new, curried function."
    }
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "ts_temp/function/curryN.js",
    "content": "import arity from './arity';\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. If `g` is `curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @example\n *\n *      var sumArgs = (...args) => sum(args);\n *\n *      var curriedAddFourNumbers = curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nexport const curryN = ((length, fn) => {\n    function curried(...args) {\n        if (args.length >= length) {\n            return fn.apply(this, args);\n        }\n        return arity(length - args.length, function (...newArgs) {\n            return curried.apply(this, args.concat(newArgs));\n        });\n    }\n    return arity(length, curried);\n});\nexport default curryN;\n//# sourceMappingURL=curryN.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/curryN.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "curryN",
    "memberof": "ts_temp/function/curryN.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/curryN.js~curryN",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/curryN",
    "importStyle": "{curryN}",
    "description": "Returns a curried equivalent of the provided function, with the specified\narity. If `g` is `curryN(3, f)`, the\nfollowing are equivalent:\n\n  - `g(1)(2)(3)`\n  - `g(1)(2, 3)`\n  - `g(1, 2)(3)`\n  - `g(1, 2, 3)`",
    "examples": [
      "\n     var sumArgs = (...args) => sum(args);\n\n     var curriedAddFourNumbers = curryN(4, sumArgs);\n     var f = curriedAddFourNumbers(1, 2);\n     var g = f(3);\n     g(4); //=> 10"
    ],
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "The arity for the returned function."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to curry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "A new, curried function."
    }
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "ts_temp/function/debounce.js",
    "content": "import curryN from './curryN';\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. Delayed function invocation might be cancelled by calling cancel method.\n *\n * @param {number} wait The number of milliseconds to delay.\n * @param {Function} fn The function to debounce.\n * @returns {Function} Returns the new debounced function.\n */\nexport const debounce = curryN(2, (wait, fn) => {\n    let timeout;\n    function f() {\n        let args = arguments;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => fn.apply(this, args), // eslint-disable-line prefer-rest-params\n        wait);\n    }\n    f.cancel = () => clearTimeout(timeout);\n    return f;\n});\nexport default debounce;\n//# sourceMappingURL=debounce.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/debounce.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "variable",
    "name": "debounce",
    "memberof": "ts_temp/function/debounce.js",
    "static": true,
    "longname": "ts_temp/function/debounce.js~debounce",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/debounce",
    "importStyle": "{debounce}",
    "description": "Creates a debounced function that delays invoking `func` until after `wait`\nmilliseconds have elapsed since the last time the debounced function was\ninvoked. Delayed function invocation might be cancelled by calling cancel method.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} Returns the new debounced function."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wait",
        "description": "The number of milliseconds to delay."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to debounce."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "Returns the new debounced function."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "ts_temp/function/either.js",
    "content": "import curryN from './curryN';\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @example\n *\n *      var gt10 = x => x > 10;\n *      var even = x => x % 2 === 0;\n *      var f = either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n *      f(3); //=> false\n */\nexport const either = curryN(2, (f, g) => (...args) => f(...args) || g(...args));\nexport default either;\n//# sourceMappingURL=either.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/either.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "name": "either",
    "memberof": "ts_temp/function/either.js",
    "static": true,
    "longname": "ts_temp/function/either.js~either",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/either",
    "importStyle": "{either}",
    "description": "A function wrapping calls to the two functions in an `||` operation,\nreturning the result of the first function if it is truth-y and the result\nof the second function otherwise. Note that this is short-circuited,\nmeaning that the second function will not be invoked if the first returns a\ntruth-y value.",
    "examples": [
      "\n     var gt10 = x => x > 10;\n     var even = x => x % 2 === 0;\n     var f = either(gt10, even);\n     f(101); //=> true\n     f(8); //=> true\n     f(3); //=> false"
    ],
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "a predicate"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "another predicate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "a function that applies its arguments to `f` and `g` and `||`s their outputs together."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "ts_temp/function/flip.js",
    "content": "import curryN from './curryN';\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      const neg = (a, b) => a - b\n *\n *      flip(neg)(3, 5); //=> 2\n */\nexport const flip = ((fn) => curryN(2, function (a, b) {\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n}));\nexport default flip;\n//# sourceMappingURL=flip.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/flip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "flip",
    "memberof": "ts_temp/function/flip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/flip.js~flip",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/flip",
    "importStyle": "{flip}",
    "description": "Returns a new function much like the supplied one, except that the first two\narguments' order is reversed.",
    "examples": [
      "\n     const neg = (a, b) => a - b\n\n     flip(neg)(3, 5); //=> 2"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to invoke with its first two parameters reversed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The result of invoking `fn` with its first two parameters' order reversed."
    }
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "ts_temp/function/identity.js",
    "content": "/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      identity(1); //=> 1\n *\n *      const obj = {};\n *      identity(obj) === obj; //=> true\n */\nexport const identity = ((x) => x);\nexport default identity;\n//# sourceMappingURL=identity.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/identity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "identity",
    "memberof": "ts_temp/function/identity.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/identity.js~identity",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/identity",
    "importStyle": "{identity}",
    "description": "A function that does nothing but return the parameter supplied to it. Good\nas a default or placeholder function.",
    "examples": [
      "\n     identity(1); //=> 1\n\n     const obj = {};\n     identity(obj) === obj; //=> true"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The value to return."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The input value, `x`."
    }
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "ts_temp/function/ifElse.js",
    "content": "import curryN from './curryN';\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse`\n * function depending upon the result of the `condition` predicate.\n *\n * @param {Function} condition A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n *                    function depending upon the result of the `condition` predicate.\n * @example\n *\n *      const prop = ifElse(\n *        x => x.a,\n *        x => x.b,\n *        x => x.c\n *      );\n *      prop({ a: false, c: 2 }); //=> 2\n *      prop({ a: true, b: 1, c: 2 }); //=> 1\n */\nexport const ifElse = curryN(3, (condition, onTrue, onFalse) => (...args) => condition(...args) ? onTrue(...args) : onFalse(...args));\nexport default ifElse;\n//# sourceMappingURL=ifElse.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/ifElse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "ifElse",
    "memberof": "ts_temp/function/ifElse.js",
    "static": true,
    "longname": "ts_temp/function/ifElse.js~ifElse",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/ifElse",
    "importStyle": "{ifElse}",
    "description": "Creates a function that will process either the `onTrue` or the `onFalse`\nfunction depending upon the result of the `condition` predicate.",
    "examples": [
      "\n     const prop = ifElse(\n       x => x.a,\n       x => x.b,\n       x => x.c\n     );\n     prop({ a: false, c: 2 }); //=> 2\n     prop({ a: true, b: 1, c: 2 }); //=> 1"
    ],
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "A predicate function"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onTrue",
        "description": "A function to invoke when the `condition` evaluates to a truthy value."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onFalse",
        "description": "A function to invoke when the `condition` evaluates to a falsy value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "A new unary function that will process either the `onTrue` or the `onFalse`\n                   function depending upon the result of the `condition` predicate."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "ts_temp/function/memoize/createCache.js",
    "content": "/**\n * Creates a cache instance base on passed object.\n * Return instance has 3 methods: get, set, has\n *\n * *\n * @param {Function} obj - object that will be used as cache\n * @return {{get; set; has}}\n * @example\n *      const cache = createCache();\n *      cache.set('a', 5);\n *      cache.has('a'); // true\n *      cache.get('a'); // 5\n */\nexport const createCache = (obj = Object.create(null)) => {\n    return {\n        get(key) {\n            return obj[key];\n        },\n        set(key, value) {\n            obj[key] = value;\n            return this;\n        },\n        has(key) {\n            return key in obj;\n        },\n    };\n};\nexport default createCache;\n//# sourceMappingURL=createCache.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/memoize/createCache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "createCache",
    "memberof": "ts_temp/function/memoize/createCache.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/memoize/createCache.js~createCache",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/memoize/createCache",
    "importStyle": "{createCache}",
    "description": "Creates a cache instance base on passed object.\nReturn instance has 3 methods: get, set, has\n\n*",
    "examples": [
      "     const cache = createCache();\n     cache.set('a', 5);\n     cache.has('a'); // true\n     cache.get('a'); // 5"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "object that will be used as cache"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{get; set; has}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "ts_temp/function/memoize/deep.js",
    "content": "import memoizeWith from './with';\nimport createCacheFrom from './createCache';\n/**\n * Memoize function with multiply arguments of any type.\n * Use it when you need deep equality for cache lookup.\n *\n * @param {Function} fn\n * @returns {Function}\n * @example\n *     const addFlag = obj => ({...obj, flag: true });\n *     const memoize = memoizeDeep(addFlag));\n *     const test = {};\n *     memoize(test, {test: 2}); // from addFlag call\n *     memoize(test, {test: 2}); // from cache\n *     test.id = 123;\n *     memoize(test); // from addFlag call\n */\nexport const deep = memoizeWith(createCacheFrom, (...args) => JSON.stringify(args));\nexport default deep;\n//# sourceMappingURL=deep.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/memoize/deep.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "deep",
    "memberof": "ts_temp/function/memoize/deep.js",
    "static": true,
    "longname": "ts_temp/function/memoize/deep.js~deep",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/memoize/deep",
    "importStyle": "{deep}",
    "description": "Memoize function with multiply arguments of any type.\nUse it when you need deep equality for cache lookup.",
    "examples": [
      "    const addFlag = obj => ({...obj, flag: true });\n    const memoize = memoizeDeep(addFlag));\n    const test = {};\n    memoize(test, {test: 2}); // from addFlag call\n    memoize(test, {test: 2}); // from cache\n    test.id = 123;\n    memoize(test); // from addFlag call"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "ts_temp/function/memoize/deepSizeLimit.js",
    "content": "import memoizeWith from './with';\nimport curryN from '../curryN';\n/**\n * Memoize function with multiply arguments of any type, but it\n * clears cache every time it reaches the limit. Use it when you need\n * deep equality for cache lookup and afraid of memory leak.\n *\n * @param {Number} sizeLimit. Cache size limit\n * @returns {Function} fn\n * @example\n *     const addFlag = obj => ({...obj, flag: true });\n *     const memoize = memoizeDeepSizeLimit(2, addFlag));\n *     memoize({test: 2}); // from addFlag call\n *     memoize({test: 2}); // from cache\n *     memoize({test: 3}); //from addFlag call\n *     memoize({test: 4}); // from addFlag call\n *     memoize({test: 2}); // from addFlag call (memory was cleared)\n */\nexport const deepSizeLimit = curryN(2, (maxSize, fn) => memoizeWith(() => createSizedCache(maxSize), (...args) => JSON.stringify(args), fn));\nfunction createSizedCache(maxSize) {\n    const cache = new Map();\n    cache.set = (...args) => {\n        // flush cache if size reached the limit\n        if (cache.size >= maxSize) {\n            cache.clear();\n        }\n        return Map.prototype.set.call(cache, ...args);\n    };\n    return cache;\n}\nexport default deepSizeLimit;\n//# sourceMappingURL=deepSizeLimit.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/memoize/deepSizeLimit.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "deepSizeLimit",
    "memberof": "ts_temp/function/memoize/deepSizeLimit.js",
    "static": true,
    "longname": "ts_temp/function/memoize/deepSizeLimit.js~deepSizeLimit",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/memoize/deepSizeLimit",
    "importStyle": "{deepSizeLimit}",
    "description": "Memoize function with multiply arguments of any type, but it\nclears cache every time it reaches the limit. Use it when you need\ndeep equality for cache lookup and afraid of memory leak.",
    "examples": [
      "    const addFlag = obj => ({...obj, flag: true });\n    const memoize = memoizeDeepSizeLimit(2, addFlag));\n    memoize({test: 2}); // from addFlag call\n    memoize({test: 2}); // from cache\n    memoize({test: 3}); //from addFlag call\n    memoize({test: 4}); // from addFlag call\n    memoize({test: 2}); // from addFlag call (memory was cleared)"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} fn"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "sizeLimit.",
        "description": "Cache size limit"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "fn"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "createSizedCache",
    "memberof": "ts_temp/function/memoize/deepSizeLimit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/memoize/deepSizeLimit.js~createSizedCache",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/function/memoize/deepSizeLimit",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "maxSize",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "ts_temp/function/memoize/one.js",
    "content": "import equal from '../../is/equal';\n/**\n * Memoize function with multiply arguments of any type.\n * Use it when you need to cache lookup only for last result (like reselect).\n *\n * @param {Function} fn\n * @param {Function} isEqual - checks equality for two values\n * @returns {Function}\n * @example\n *     const addFlag = obj => ({...obj, flag: true });\n *     const memoize = memoizeOnce(addFlag));\n *     memoize(1); // from addFlag call\n *     memoize(1); // from cache\n *     memoize(1,2) // from addFlag call,\n *     memoize(1) // from addFlag call, cache was flashed on previous step\n */\nexport const one = (fn, isEqual = equal) => {\n    let lastArgs = [];\n    let lastResult;\n    let alreadyCalled = false;\n    const isNewArgEqualToLast = (newArg, index) => isEqual(newArg, lastArgs[index]);\n    return ((...newArgs) => {\n        if (alreadyCalled && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {\n            return lastResult;\n        }\n        lastResult = fn(...newArgs);\n        alreadyCalled = true;\n        lastArgs = newArgs;\n        return lastResult;\n    });\n};\nexport default one;\n//# sourceMappingURL=one.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/memoize/one.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "one",
    "memberof": "ts_temp/function/memoize/one.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/memoize/one.js~one",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/memoize/one",
    "importStyle": "{one}",
    "description": "Memoize function with multiply arguments of any type.\nUse it when you need to cache lookup only for last result (like reselect).",
    "examples": [
      "    const addFlag = obj => ({...obj, flag: true });\n    const memoize = memoizeOnce(addFlag));\n    memoize(1); // from addFlag call\n    memoize(1); // from cache\n    memoize(1,2) // from addFlag call,\n    memoize(1) // from addFlag call, cache was flashed on previous step"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "isEqual",
        "description": "checks equality for two values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "ts_temp/function/memoize/strictSingle.js",
    "content": "import memoizeWith from './with';\nimport identity from '../identity';\n/**\n * Memoize functions with single argument of non-primitive argument.\n * Uses Map instance for cache, because it's keys can be non-primitive.\n * Use it when strict equality (===) for cache lookup is enough.\n * It suitable for functions with single argument of primitive type too.\n *\n * @param {Function} fn\n * @returns {Function}\n * @example\n *     const addFlag = obj => ({...obj, flag: true });\n *     const memoize = memoizeStrictSingle(addFlag));\n *     const test = {test: 1};\n *     memoize(test); // from addFlag call\n *     memoize({test: 1}); // from addFlag call\n *     memoize(test); // from cache\n */\nexport const strictSingle = memoizeWith(() => new Map(), identity);\nexport default strictSingle;\n//# sourceMappingURL=strictSingle.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/memoize/strictSingle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "strictSingle",
    "memberof": "ts_temp/function/memoize/strictSingle.js",
    "static": true,
    "longname": "ts_temp/function/memoize/strictSingle.js~strictSingle",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/memoize/strictSingle",
    "importStyle": "{strictSingle}",
    "description": "Memoize functions with single argument of non-primitive argument.\nUses Map instance for cache, because it's keys can be non-primitive.\nUse it when strict equality (===) for cache lookup is enough.\nIt suitable for functions with single argument of primitive type too.",
    "examples": [
      "    const addFlag = obj => ({...obj, flag: true });\n    const memoize = memoizeStrictSingle(addFlag));\n    const test = {test: 1};\n    memoize(test); // from addFlag call\n    memoize({test: 1}); // from addFlag call\n    memoize(test); // from cache"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "file",
    "name": "ts_temp/function/memoize/weak.js",
    "content": "import memoizeWith from './with';\nimport identity from '../identity';\n/**\n * Simple memoization using WeakMap.\n * Only suitable for functions with single argument of non-primitive type.\n *\n * @param {Function} fn\n * @returns {Function}\n * @example\n *     const addFlag = obj => ({...obj, flag: true });\n *     const memoize = memoizeWeak(addFlag));\n *     const test = {test: 1};\n *     memoize(test); // from addFlag call\n *     memoize({test: 1}); // from addFlag call;\n *     memoize(test); // from cache\n */\nexport const weak = memoizeWith(() => new WeakMap(), identity);\nexport default weak;\n//# sourceMappingURL=weak.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/memoize/weak.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "weak",
    "memberof": "ts_temp/function/memoize/weak.js",
    "static": true,
    "longname": "ts_temp/function/memoize/weak.js~weak",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/memoize/weak",
    "importStyle": "{weak}",
    "description": "Simple memoization using WeakMap.\nOnly suitable for functions with single argument of non-primitive type.",
    "examples": [
      "    const addFlag = obj => ({...obj, flag: true });\n    const memoize = memoizeWeak(addFlag));\n    const test = {test: 1};\n    memoize(test); // from addFlag call\n    memoize({test: 1}); // from addFlag call;\n    memoize(test); // from cache"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "file",
    "name": "ts_temp/function/memoize/with.js",
    "content": "import curryN from '../curryN';\n/**\n * `memoizeWith` is a memoize function fabric. It has simple classic memoization signature.\n * Use it to build your own memoization function.\n *\n * It takes  three params:\n * 1) function that will be used to create cache object.\n * Cache must have three methods - get, has, set. So it's compatible with Map, WeakMap, LRU (https://www.npmjs.com/package/lru-cache) instances.\n * 2) function that will be used to create hash key for cache lookup. It is invoked with arguments for result function.\n * 3) function, that will be memoized.\n * *\n * @param {Function} createCache - creates cache object\n * @param {Function} hasher - creates hash for given arguments\n * @param {Function} function that will be memoized\n * @return {Function}\n * @example\n *      const createCache = () => new Map();\n *      const hasher = (...args) => JSON.stringify(args);\n *      const memoize = memoizeWith(createCache, hasher);\n *\n *      const add = (a,b) => a + b;\n *      const memoizeAdd = memoize(add);\n *      const sum = add(1,3); // from original add call\n *      const sum = add(1,4); // from original add call\n *      const sum = add(1,3); // from cache\n */\nexport const memoizeWith = curryN(3, (getCache, hasher, fn) => {\n    const cache = getCache();\n    return (...args) => {\n        const cacheKey = hasher(...args);\n        if (cache.has(cacheKey)) {\n            return cache.get(cacheKey);\n        }\n        const fnCallResult = fn(...args);\n        cache.set(cacheKey, fnCallResult);\n        return fnCallResult;\n    };\n});\nexport default memoizeWith;\n//# sourceMappingURL=with.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/memoize/with.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "memoizeWith",
    "memberof": "ts_temp/function/memoize/with.js",
    "static": true,
    "longname": "ts_temp/function/memoize/with.js~memoizeWith",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/memoize/with",
    "importStyle": "{memoizeWith}",
    "description": "`memoizeWith` is a memoize function fabric. It has simple classic memoization signature.\nUse it to build your own memoization function.\n\nIt takes  three params:\n1) function that will be used to create cache object.\nCache must have three methods - get, has, set. So it's compatible with Map, WeakMap, LRU (https://www.npmjs.com/package/lru-cache) instances.\n2) function that will be used to create hash key for cache lookup. It is invoked with arguments for result function.\n3) function, that will be memoized.\n*",
    "examples": [
      "     const createCache = () => new Map();\n     const hasher = (...args) => JSON.stringify(args);\n     const memoize = memoizeWith(createCache, hasher);\n\n     const add = (a,b) => a + b;\n     const memoizeAdd = memoize(add);\n     const sum = add(1,3); // from original add call\n     const sum = add(1,4); // from original add call\n     const sum = add(1,3); // from cache"
    ],
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "createCache",
        "description": "creates cache object"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "hasher",
        "description": "creates hash for given arguments"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "function",
        "description": "that will be memoized"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "ts_temp/function/noop.js",
    "content": "/**\n * This method doing nothing and returns `undefined`.\n */\nexport const noop = (() => {\n});\nexport default noop;\n//# sourceMappingURL=noop.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/noop.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "noop",
    "memberof": "ts_temp/function/noop.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/noop.js~noop",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/noop",
    "importStyle": "{noop}",
    "description": "This method doing nothing and returns `undefined`.",
    "lineNumber": 4,
    "params": [],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "file",
    "name": "ts_temp/function/nothing.js",
    "content": "/**\n * A function that always returns `undefined`. Any passed in parameters are ignored.\n *\n * @return {Undefined}\n * @example\n *\n *      nothing(); //=> undefined\n */\nexport const nothing = (() => undefined);\nexport default nothing;\n//# sourceMappingURL=nothing.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/nothing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 227,
    "kind": "function",
    "name": "nothing",
    "memberof": "ts_temp/function/nothing.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/nothing.js~nothing",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/nothing",
    "importStyle": "{nothing}",
    "description": "A function that always returns `undefined`. Any passed in parameters are ignored.",
    "examples": [
      "\n     nothing(); //=> undefined"
    ],
    "lineNumber": 9,
    "return": {
      "nullable": null,
      "types": [
        "Undefined"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 228,
    "kind": "file",
    "name": "ts_temp/function/once.js",
    "content": "/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      var addOneOnce = once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */\nexport const once = ((fn) => {\n    let called = false;\n    let result;\n    return (...args) => {\n        if (called) {\n            return result;\n        }\n        result = fn(...args);\n        called = true;\n        return result;\n    };\n});\nexport default once;\n//# sourceMappingURL=once.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/once.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "once",
    "memberof": "ts_temp/function/once.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/function/once.js~once",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/once",
    "importStyle": "{once}",
    "description": "Accepts a function `fn` and returns a function that guards invocation of\n`fn` such that `fn` can only ever be called once, no matter how many times\nthe returned function is invoked. The first value calculated is returned in\nsubsequent invocations.",
    "examples": [
      "\n     var addOneOnce = once(x => x + 1);\n     addOneOnce(10); //=> 11\n     addOneOnce(addOneOnce(50)); //=> 11"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to wrap in a call-only-once wrapper."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The wrapped function."
    }
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "ts_temp/function/optional.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Wraps a one-parameter function,\n * new function returns true if passed parameter is undefined, otherwise returns result of calling `fn`\n *\n * @param {Function} fn function to wrap\n * @returns {Function}\n * @example\n *\n *      const optIsString = optional(isString);\n *      optIsString() // => true\n *      optIsString({}) // => false\n *      optIsString('str') // => true\n */\nexport const optional = curryN(2, (fn, x) => typeof x === 'undefined' || fn(x));\nexport default optional;\n//# sourceMappingURL=optional.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/optional.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "name": "optional",
    "memberof": "ts_temp/function/optional.js",
    "static": true,
    "longname": "ts_temp/function/optional.js~optional",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/optional",
    "importStyle": "{optional}",
    "description": "Wraps a one-parameter function,\nnew function returns true if passed parameter is undefined, otherwise returns result of calling `fn`",
    "examples": [
      "\n     const optIsString = optional(isString);\n     optIsString() // => true\n     optIsString({}) // => false\n     optIsString('str') // => true"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "function to wrap"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "ts_temp/function/tap.js",
    "content": "import curryN from './curryN';\n/**\n * Runs the given function with the supplied argument, then returns the argument.\n *\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      var sayX = x => console.log('x is ' + x);\n *      tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n */\nexport const tap = curryN(2, (fn, x) => {\n    fn(x);\n    return x;\n});\nexport default tap;\n//# sourceMappingURL=tap.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/tap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "variable",
    "name": "tap",
    "memberof": "ts_temp/function/tap.js",
    "static": true,
    "longname": "ts_temp/function/tap.js~tap",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/tap",
    "importStyle": "{tap}",
    "description": "Runs the given function with the supplied argument, then returns the argument.",
    "examples": [
      "\n     var sayX = x => console.log('x is ' + x);\n     tap(sayX, 100); //=> 100\n     // logs 'x is 100'"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to call with `x`. The return value of `fn` will be thrown away."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "`x`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "ts_temp/function/throttle.js",
    "content": "import curryN from './curryN';\n/**\n * Creates a throttled function that only invokes `fn` at most once per\n * every `wait` milliseconds. `fn` is called in start of `wait` delay\n *\n * @param {number} wait The number of milliseconds to throttle invocations to.\n * @param {Function} fn The function to throttle.\n */\nexport const throttle = curryN(2, (wait, fn) => {\n    let lastCalled;\n    let timeout;\n    return function (...args) {\n        const now = Date.now();\n        const diff = lastCalled + wait - now;\n        if (lastCalled && diff > 0) {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => {\n                lastCalled = now;\n                fn.apply(this, args);\n            }, diff);\n        }\n        else {\n            lastCalled = now;\n            fn.apply(this, args);\n        }\n    };\n});\nexport default throttle;\n//# sourceMappingURL=throttle.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/throttle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "variable",
    "name": "throttle",
    "memberof": "ts_temp/function/throttle.js",
    "static": true,
    "longname": "ts_temp/function/throttle.js~throttle",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/throttle",
    "importStyle": "{throttle}",
    "description": "Creates a throttled function that only invokes `fn` at most once per\nevery `wait` milliseconds. `fn` is called in start of `wait` delay",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wait",
        "description": "The number of milliseconds to throttle invocations to."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to throttle."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "ts_temp/function/throttleEnd.js",
    "content": "import curryN from './curryN';\n/**\n * Creates a throttled function that only invokes `fn` at most once per\n * every `wait` milliseconds. `fn` is called in the end of `wait` delay\n *\n * @param {number} wait The number of milliseconds to throttle invocations to.\n * @param {Function} fn The function to throttle.\n */\nexport const throttleEnd = curryN(2, (wait, fn) => {\n    let lastCalled;\n    let lastArgs;\n    let lastThis;\n    let timeout;\n    return function (...args) {\n        const now = Date.now();\n        const diff = lastCalled + wait - now;\n        if (diff < 0 && timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n            fn.apply(this, args);\n        }\n        else if (!timeout) {\n            timeout = setTimeout(() => {\n                fn.apply(lastThis, lastArgs);\n                timeout = null;\n            }, wait);\n        }\n        lastCalled = now;\n        lastArgs = args;\n        lastThis = this;\n    };\n});\nexport default throttleEnd;\n//# sourceMappingURL=throttleEnd.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/throttleEnd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "name": "throttleEnd",
    "memberof": "ts_temp/function/throttleEnd.js",
    "static": true,
    "longname": "ts_temp/function/throttleEnd.js~throttleEnd",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/throttleEnd",
    "importStyle": "{throttleEnd}",
    "description": "Creates a throttled function that only invokes `fn` at most once per\nevery `wait` milliseconds. `fn` is called in the end of `wait` delay",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "wait",
        "description": "The number of milliseconds to throttle invocations to."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to throttle."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "file",
    "name": "ts_temp/function/tryCatch.js",
    "content": "import curryN from './curryN';\n/**\n * Takes two functions, tryer and catcher.\n *\n * Returns a function that, when invoked with zero or more parameters,\n * calls the tryer with those parameters, and if tryer throws,\n * calls the catcher with the error as first argument and original arguments as rest.\n * If that still throws, then ¯\\_(ツ)_/¯\n *\n * @param {Function} tryer\n * @param {Function} catcher\n * @return {Function}\n * @example\n *      tryCatch(x => x.length, () => 0)([ 1, 2, 3 ]) // 3\n *      tryCatch(x => x.length, () => 0)( undefined ) // 0\n *      tryCatch(\n *          someDataTransform,\n *          (err, ...rest) => {\n *              logAsyncToServer('someDataTransform failed', err, 'with arguments', rest);\n *              return DEFAULT_VALUE;\n *          }\n *      )( someIncompleteData ) // DEFAULT_VALUE (error is logged somewhere)\n */\nexport const tryCatch = curryN(2, (tryer, catcher) => {\n    return (...args) => {\n        try {\n            return tryer.apply(this, args);\n        }\n        catch (e) {\n            args.unshift(e);\n            return catcher.apply(this, args);\n        }\n    };\n});\nexport default tryCatch;\n//# sourceMappingURL=tryCatch.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/tryCatch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "name": "tryCatch",
    "memberof": "ts_temp/function/tryCatch.js",
    "static": true,
    "longname": "ts_temp/function/tryCatch.js~tryCatch",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/tryCatch",
    "importStyle": "{tryCatch}",
    "description": "Takes two functions, tryer and catcher.\n\nReturns a function that, when invoked with zero or more parameters,\ncalls the tryer with those parameters, and if tryer throws,\ncalls the catcher with the error as first argument and original arguments as rest.\nIf that still throws, then ¯\\_(ツ)_/¯",
    "examples": [
      "     tryCatch(x => x.length, () => 0)([ 1, 2, 3 ]) // 3\n     tryCatch(x => x.length, () => 0)( undefined ) // 0\n     tryCatch(\n         someDataTransform,\n         (err, ...rest) => {\n             logAsyncToServer('someDataTransform failed', err, 'with arguments', rest);\n             return DEFAULT_VALUE;\n         }\n     )( someIncompleteData ) // DEFAULT_VALUE (error is logged somewhere)"
    ],
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "tryer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "catcher",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "ts_temp/function/updatePropertyValue.js",
    "content": "import curryN from './curryN';\n/**\n * A function to change value by property name in object.\n *\n * @deprecated use propSet instead\n * @param {String} propertyName property name of target object\n * @param {Any} propertyValue new value\n * @param {Object} obj a target object\n * @return {Object} changed object with new value\n * @example\n *      var fn = () => {};\n *      var updateName = updatePropertyValue('name', 'newFn');\n *\n *      fn.name //=> 'fn'\n *\n *      var newFn = updateName(fn);\n *\n *      newFn.name //=> 'newFn'\n *      fn.name //=> 'newFn'\n */\nexport const updatePropertyValue = curryN(2, (propertyName, propertyValue, obj) => {\n    const descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n    descriptor.value = propertyValue;\n    Object.defineProperty(obj, propertyName, descriptor);\n    return obj;\n});\nexport default updatePropertyValue;\n//# sourceMappingURL=updatePropertyValue.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/updatePropertyValue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "updatePropertyValue",
    "memberof": "ts_temp/function/updatePropertyValue.js",
    "static": true,
    "longname": "ts_temp/function/updatePropertyValue.js~updatePropertyValue",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/updatePropertyValue",
    "importStyle": "{updatePropertyValue}",
    "description": "A function to change value by property name in object.",
    "examples": [
      "     var fn = () => {};\n     var updateName = updatePropertyValue('name', 'newFn');\n\n     fn.name //=> 'fn'\n\n     var newFn = updateName(fn);\n\n     newFn.name //=> 'newFn'\n     fn.name //=> 'newFn'"
    ],
    "lineNumber": 21,
    "deprecated": "use propSet instead",
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "propertyName",
        "description": "property name of target object"
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "propertyValue",
        "description": "new value"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "a target object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "changed object with new value"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "ts_temp/function/when.js",
    "content": "import curryN from './curryN';\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is satisfied, the function will return the result of calling\n * the `onTrue` function with the same argument. If the predicate is not\n * satisfied, the argument is returned as is.\n *\n * @param {Function} pred       A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {*} x An object to test with the `pred` function and pass to `onTrue` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `onTrue`.\n * @example\n *\n *      // truncate :: String -> String\n *      var truncate = R.when(\n *        x => x.length > 10,\n *        x => x.slice(0, 10) + '...'\n *      );\n *      truncate('12345');         //=> '12345'\n *      truncate('0123456789ABC'); //=> '0123456789…'\n */\nexport const when = curryN(3, (pred, onTrue, x) => {\n    if (pred(x)) {\n        return onTrue(x);\n    }\n    return x;\n});\nexport default when;\n//# sourceMappingURL=when.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/function/when.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "when",
    "memberof": "ts_temp/function/when.js",
    "static": true,
    "longname": "ts_temp/function/when.js~when",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/function/when",
    "importStyle": "{when}",
    "description": "Tests the final argument by passing it to the given predicate function. If\nthe predicate is satisfied, the function will return the result of calling\nthe `onTrue` function with the same argument. If the predicate is not\nsatisfied, the argument is returned as is.",
    "examples": [
      "\n     // truncate :: String -> String\n     var truncate = R.when(\n       x => x.length > 10,\n       x => x.slice(0, 10) + '...'\n     );\n     truncate('12345');         //=> '12345'\n     truncate('0123456789ABC'); //=> '0123456789…'"
    ],
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pred",
        "description": "A predicate function"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onTrue",
        "description": "A function to invoke when the `condition` evaluates to a truthy value."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "An object to test with the `pred` function and pass to `onTrue` if necessary."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Either `x` or the result of applying `x` to `onTrue`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "ts_temp/is/array.js",
    "content": "/**\n * Checks if `test` is array.\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `test` is array, else `false`.\n * @example\n *\n * isArray([]); // => true\n * isArray(null); // => false\n */\nexport const isArray = (test) => !!test && Array.isArray(test);\nexport default isArray;\n//# sourceMappingURL=array.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/array.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "isArray",
    "memberof": "ts_temp/is/array.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/array.js~isArray",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/array",
    "importStyle": "{isArray}",
    "description": "Checks if `test` is array.",
    "examples": [
      "\nisArray([]); // => true\nisArray(null); // => false"
    ],
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `test` is array, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `test` is array, else `false`."
    }
  },
  {
    "__docId__": 246,
    "kind": "file",
    "name": "ts_temp/is/arrayLike.js",
    "content": "import isArray from './array';\nimport isString from './string';\nimport has from '../object/has';\n/**\n * Checks if `test` is arrayLike (has `length` and index properties).\n *\n * @param {*} test The value to check.\n * @returns {boolean}\n * @example\n *\n * isArrayLike([]); // => true\n * isArrayLike({ 0:'a', 1: 'b', length: 2 }); // => true\n * isArrayLike(null); // => false\n */\nexport const isArrayLike = (test) => {\n    switch (true) {\n        case isArray(test):\n            return true;\n        case !test:\n        case typeof test !== 'object':\n        case isString(test):\n            return false;\n        case test.nodeType === 1:\n            return !!test.length;\n        case test.length === 0:\n            return true;\n        case test.length > 0:\n            return has('0', test) && has(String(test.length - 1), test);\n    }\n    return false;\n};\nexport default isArrayLike;\n//# sourceMappingURL=arrayLike.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/arrayLike.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "isArrayLike",
    "memberof": "ts_temp/is/arrayLike.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/arrayLike.js~isArrayLike",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/arrayLike",
    "importStyle": "{isArrayLike}",
    "description": "Checks if `test` is arrayLike (has `length` and index properties).",
    "examples": [
      "\nisArrayLike([]); // => true\nisArrayLike({ 0:'a', 1: 'b', length: 2 }); // => true\nisArrayLike(null); // => false"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "ts_temp/is/boolean.js",
    "content": "/**\n * Checks if `test` is boolean.\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `value` is boolean, else `false`.\n * @example\n *\n * isBool(false); // => true\n * isBool(new Boolean()); // => true\n * isBool(null); // => false\n */\nexport const isBoolean = (test) => typeof test === 'boolean' || test instanceof Boolean;\nexport default isBoolean;\n//# sourceMappingURL=boolean.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/boolean.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "isBoolean",
    "memberof": "ts_temp/is/boolean.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/boolean.js~isBoolean",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/boolean",
    "importStyle": "{isBoolean}",
    "description": "Checks if `test` is boolean.",
    "examples": [
      "\nisBool(false); // => true\nisBool(new Boolean()); // => true\nisBool(null); // => false"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `value` is boolean, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `value` is boolean, else `false`."
    }
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "ts_temp/is/element.js",
    "content": "import isObject from './object';\nimport isPlainObject from './plainObject';\n/**\n * Checks if `value` is likely a DOM element.\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n * @example\n *\n * isElement(document.body); // => true\n *\n * isElement('<body>'); // => false\n */\nexport const isElement = (test) => isObject(test) && test.nodeType === 1 && !isPlainObject(test);\nexport default isElement;\n//# sourceMappingURL=element.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/element.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "function",
    "name": "isElement",
    "memberof": "ts_temp/is/element.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/element.js~isElement",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/element",
    "importStyle": "{isElement}",
    "description": "Checks if `value` is likely a DOM element.",
    "examples": [
      "\nisElement(document.body); // => true\n\nisElement('<body>'); // => false"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `value` is a DOM element, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `value` is a DOM element, else `false`."
    }
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "ts_temp/is/empty.js",
    "content": "import isNil from './nil';\nimport isArray from './array';\nimport isString from './string';\nimport isObject from './object';\n/**\n * Checks if `test` is empty.\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `test` is empty, else `false`.\n * @example\n *\n * isEmpty([]); // => true\n * isEmpty(null); // => true\n * isEmpty({}); // => true\n * isEmpty(''); // => true\n * isEmpty('test'); // => false\n * isEmpty({ a: 5 }); // => false\n * isEmpty([1]); // => false\n */\nexport const isEmpty = (test) => {\n    switch (true) {\n        case isNil(test):\n            return true;\n        case isString(test):\n            return test === '';\n        case isArray(test):\n            return test.length === 0;\n        case isObject(test):\n            return Object.keys(test).length === 0;\n    }\n    return false;\n};\nexport default isEmpty;\n//# sourceMappingURL=empty.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/empty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "isEmpty",
    "memberof": "ts_temp/is/empty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/empty.js~isEmpty",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/empty",
    "importStyle": "{isEmpty}",
    "description": "Checks if `test` is empty.",
    "examples": [
      "\nisEmpty([]); // => true\nisEmpty(null); // => true\nisEmpty({}); // => true\nisEmpty(''); // => true\nisEmpty('test'); // => false\nisEmpty({ a: 5 }); // => false\nisEmpty([1]); // => false"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `test` is empty, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `test` is empty, else `false`."
    }
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "ts_temp/is/equal.js",
    "content": "import curry from '../function/curry';\nimport isArray from './array';\nconst isEqualNativeTypes = (test1, test2) => test1.toString() === test2.toString();\nconst isEqualArrays = (test1, test2) => {\n    const len = test1.length;\n    if (len !== test2.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (!isEqual(test1[i], test2[i])) {\n            return false;\n        }\n    }\n    return true;\n};\nconst isEqualObjects = (test1, test2) => {\n    const keys = Object.keys(test1);\n    const len = keys.length;\n    if (len !== Object.keys(test2).length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        const key = keys[i];\n        if (!(Object.prototype.hasOwnProperty.call(test2, key) && isEqual(test1[key], test2[key]))) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise.\n *\n * @param {*} test1\n * @param {*} test2\n * @return {Boolean}\n * @example\n *\n *      isEqual(1, 1); //=> true\n *      isEqual(1, '1'); //=> false\n *      isEqual([1, 2, 3], [1, 2, 3]); //=> true\n *      isEqual({ a: { b: 1 }}, { a: { b: 1 }}); //=> true\n */\nexport const isEqual = curry((test1, test2) => {\n    if (test1 === test2) {\n        return true;\n    }\n    if (typeof test1 !== typeof test2 || test1 !== Object(test1) || !test1 || !test2) {\n        return false;\n    }\n    if (isArray(test1) && isArray(test2)) {\n        return isEqualArrays(test1, test2);\n    }\n    const test1ToString = Object.prototype.toString.call(test1);\n    if (test1ToString === '[object Object]' && Object.prototype.toString.call(test2) === test1ToString) {\n        return isEqualObjects(test1, test2);\n    }\n    return isEqualNativeTypes(test1, test2);\n});\nexport default isEqual;\n//# sourceMappingURL=equal.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/equal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "isEqualNativeTypes",
    "memberof": "ts_temp/is/equal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/equal.js~isEqualNativeTypes",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/is/equal",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "test1",
        "types": [
          "*"
        ]
      },
      {
        "name": "test2",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "isEqualArrays",
    "memberof": "ts_temp/is/equal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/equal.js~isEqualArrays",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/is/equal",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "test1",
        "types": [
          "*"
        ]
      },
      {
        "name": "test2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "isEqualObjects",
    "memberof": "ts_temp/is/equal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/equal.js~isEqualObjects",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/is/equal",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "test1",
        "types": [
          "*"
        ]
      },
      {
        "name": "test2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "isEqual",
    "memberof": "ts_temp/is/equal.js",
    "static": true,
    "longname": "ts_temp/is/equal.js~isEqual",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/equal",
    "importStyle": "{isEqual}",
    "description": "Returns `true` if its arguments are equivalent, `false` otherwise.",
    "examples": [
      "\n     isEqual(1, 1); //=> true\n     isEqual(1, '1'); //=> false\n     isEqual([1, 2, 3], [1, 2, 3]); //=> true\n     isEqual({ a: { b: 1 }}, { a: { b: 1 }}); //=> true"
    ],
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "file",
    "name": "ts_temp/is/finite.js",
    "content": "import isNumber from './number';\n/**\n * Checks if `test` is finite.\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `test` is finite, else `false`.\n * @example\n *\n * isFinite(5); // => true\n * isFinite(null); // => false\n */\nexport const isFinite = (test) => isNumber(test) && global.isFinite(test);\nexport default isFinite;\n//# sourceMappingURL=finite.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/finite.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 260,
    "kind": "function",
    "name": "isFinite",
    "memberof": "ts_temp/is/finite.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/finite.js~isFinite",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/finite",
    "importStyle": "{isFinite}",
    "description": "Checks if `test` is finite.",
    "examples": [
      "\nisFinite(5); // => true\nisFinite(null); // => false"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `test` is finite, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `test` is finite, else `false`."
    }
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "ts_temp/is/function.js",
    "content": "/**\n * Checks if `test` is function.\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `test` is function, else `false`.\n * @example\n *\n * isFunction(() => {}); // => true\n * isFunction(null); // => false\n */\nexport const isFunction = (test) => typeof test === 'function';\nexport default isFunction;\n//# sourceMappingURL=function.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/function.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "function",
    "name": "isFunction",
    "memberof": "ts_temp/is/function.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/function.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/function",
    "importStyle": "{isFunction}",
    "description": "Checks if `test` is function.",
    "examples": [
      "\nisFunction(() => {}); // => true\nisFunction(null); // => false"
    ],
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `test` is function, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `test` is function, else `false`."
    }
  },
  {
    "__docId__": 263,
    "kind": "file",
    "name": "ts_temp/is/nil.js",
    "content": "/**\n * Checks if `test` is nil (null or undefined).\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `test` is nil, else `false`.\n * @example\n *\n * isNil(undefined); // => true\n * isNil(null); // => true\n * isNil(''); // => false\n * isNil(5); // => false\n */\nexport const isNil = (test) => test == null;\nexport default isNil;\n//# sourceMappingURL=nil.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/nil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "isNil",
    "memberof": "ts_temp/is/nil.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/nil.js~isNil",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/nil",
    "importStyle": "{isNil}",
    "description": "Checks if `test` is nil (null or undefined).",
    "examples": [
      "\nisNil(undefined); // => true\nisNil(null); // => true\nisNil(''); // => false\nisNil(5); // => false"
    ],
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `test` is nil, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `test` is nil, else `false`."
    }
  },
  {
    "__docId__": 265,
    "kind": "file",
    "name": "ts_temp/is/number.js",
    "content": "/**\n * Checks if `test` is number.\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `test` is number, else `false`.\n * @example\n *\n * isNumber(5); // => true\n * isNumber(null); // => false\n */\nexport const isNumber = (test) => typeof test === 'number' || test instanceof Number;\nexport default isNumber;\n//# sourceMappingURL=number.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/number.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "function",
    "name": "isNumber",
    "memberof": "ts_temp/is/number.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/number.js~isNumber",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/number",
    "importStyle": "{isNumber}",
    "description": "Checks if `test` is number.",
    "examples": [
      "\nisNumber(5); // => true\nisNumber(null); // => false"
    ],
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `test` is number, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `test` is number, else `false`."
    }
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "ts_temp/is/object.js",
    "content": "/**\n * Checks if `test` is object.\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `test` is object, else `false`.\n * @example\n *\n * isObject({ a: 'test' }); // => true\n * isObject(null); // => false\n */\nexport const isObject = (test) => test !== null && typeof test === 'object';\nexport default isObject;\n//# sourceMappingURL=object.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/object.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "isObject",
    "memberof": "ts_temp/is/object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/object.js~isObject",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/object",
    "importStyle": "{isObject}",
    "description": "Checks if `test` is object.",
    "examples": [
      "\nisObject({ a: 'test' }); // => true\nisObject(null); // => false"
    ],
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `test` is object, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `test` is object, else `false`."
    }
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "ts_temp/is/plainObject.js",
    "content": "import isReactElement from './reactElement';\nimport isReactComponent from './reactComponent';\nimport isObject from './object';\n/**\n * Returns whether a value is a plain object\n * (an object that is created using an object literal, Object.create(null) or similar).\n * Rejects anything with a custom prototype or a non-object ECMAScript type.\n * Also rejects React elements and components\n *\n * **Note:** if the host environment does not support Symbol, any object with a $$typeof\n * property is considered a React element\n *\n * @param {*} test The value to check\n * @returns {boolean} Returns `true` if `test` is a plain object, else `false`.\n * @example\n *\n * isPlainObject({ a: 'test' }); // => true\n *\n * isPlainObject(moment()); // => false\n *\n * isPlainObject(<span></span>); // => false\n */\nexport const isPlainObject = function isPlainObject(test) {\n    if (!isObject(test)) {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(test);\n    if (prototype === null) {\n        // objects created with Object.create(null) are still plain objects\n        return true;\n    }\n    if (prototype !== Object.prototype) {\n        // has a custom prototype, probably was created with a custom constructor,\n        // may contain internal data that's not meant to be accessed from outside\n        return false;\n    }\n    if (isReactElement(test) || isReactComponent(test)) {\n        // react elements _are_ plain objects, but we don't treat them like that\n        // (e.g. in recursive merges)\n        return false;\n    }\n    return true;\n};\nexport default isPlainObject;\n//# sourceMappingURL=plainObject.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/plainObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "isPlainObject",
    "memberof": "ts_temp/is/plainObject.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/plainObject.js~isPlainObject",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/plainObject",
    "importStyle": "{isPlainObject}",
    "description": "Returns whether a value is a plain object\n(an object that is created using an object literal, Object.create(null) or similar).\nRejects anything with a custom prototype or a non-object ECMAScript type.\nAlso rejects React elements and components\n\n**Note:** if the host environment does not support Symbol, any object with a $$typeof\nproperty is considered a React element",
    "examples": [
      "\nisPlainObject({ a: 'test' }); // => true\n\nisPlainObject(moment()); // => false\n\nisPlainObject(<span></span>); // => false"
    ],
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `test` is a plain object, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `test` is a plain object, else `false`."
    }
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "ts_temp/is/promise.js",
    "content": "import isObject from './object';\nimport isFunction from './function';\n/**\n * Checks if `test` is Promise.\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `test` is Promise, else `false`.\n * @example\n *\n *      isPromise({}) // => false\n *      isPromise(Promise.resolve()) // => true\n */\nexport const isPromise = (test) => (isObject(test) || isFunction(test)) && isFunction(test.then);\nexport default isPromise;\n//# sourceMappingURL=promise.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/promise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "isPromise",
    "memberof": "ts_temp/is/promise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/promise.js~isPromise",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/promise",
    "importStyle": "{isPromise}",
    "description": "Checks if `test` is Promise.",
    "examples": [
      "\n     isPromise({}) // => false\n     isPromise(Promise.resolve()) // => true"
    ],
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `test` is Promise, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `test` is Promise, else `false`."
    }
  },
  {
    "__docId__": 273,
    "kind": "file",
    "name": "ts_temp/is/reactComponent.js",
    "content": "import has from '../object/has';\nlet isComponent;\ntry {\n    isComponent = require('react-is').isValidElementType;\n}\ncatch (e) {\n}\nif (!isComponent) {\n    isComponent = (test) => typeof test === 'string' || typeof test === 'function' || (!!test && has('$$typeof', test));\n}\n/**\n * Returns whether a value is a valid React component\n *\n * **Note:** uses `react-is` library internally. If the host environment does not has `react-is` library,\n * any strings, function or object with $$typeof property are considered valid.\n *\n * **Note:**\n *\n * @param {*} test a reference being tested\n * @returns whether a value is a React component\n */\nexport const isReactComponent = isComponent;\nexport default isReactComponent;\n//# sourceMappingURL=reactComponent.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/reactComponent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "variable",
    "name": "isReactComponent",
    "memberof": "ts_temp/is/reactComponent.js",
    "static": true,
    "longname": "ts_temp/is/reactComponent.js~isReactComponent",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/reactComponent",
    "importStyle": "{isReactComponent}",
    "description": "Returns whether a value is a valid React component\n\n**Note:** uses `react-is` library internally. If the host environment does not has `react-is` library,\nany strings, function or object with $$typeof property are considered valid.\n\n**Note:**",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "whether a value is a React component"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "a reference being tested"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "whether a value is a React component"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "file",
    "name": "ts_temp/is/reactElement.js",
    "content": "import has from '../object/has';\nlet isElement;\ntry {\n    isElement = require('react-is').isElement;\n}\ncatch (e) {\n}\nif (!isElement) {\n    isElement = (test) => !!test && has('$$typeof', test);\n}\n/**\n * Returns whether a value is a valid React element\n *\n * **Note:** uses `react-is` library internally. If the host environment does not has `react-is` library,\n * any object with $$typeof property is considered valid.\n *\n * **Note:**\n *\n * @param {*} test a reference being tested\n * @returns whether a value is a React element\n */\nexport const isReactElement = isElement;\nexport default isReactElement;\n//# sourceMappingURL=reactElement.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/reactElement.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 276,
    "kind": "variable",
    "name": "isReactElement",
    "memberof": "ts_temp/is/reactElement.js",
    "static": true,
    "longname": "ts_temp/is/reactElement.js~isReactElement",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/reactElement",
    "importStyle": "{isReactElement}",
    "description": "Returns whether a value is a valid React element\n\n**Note:** uses `react-is` library internally. If the host environment does not has `react-is` library,\nany object with $$typeof property is considered valid.\n\n**Note:**",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "whether a value is a React element"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "a reference being tested"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "whether a value is a React element"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "ts_temp/is/shallowEqual.js",
    "content": "import isObject from './object';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Returns `true` if its arguments are equivalent is shallow equal terms, `false` otherwise.\n *\n * @param {*} test1\n * @param {*} test2\n * @return {Boolean}\n * @example\n *\n *      isShallowEqual(1, 1); //=> true\n *      isShallowEqual(1, '1'); //=> false\n *      isShallowEqual([1, 2, 3], [1, 2, 3]); //=> true\n *      isShallowEqual({ a: { b: 1 }}, { a: { b: 1 }}); //=> false\n */\nexport const isShallowEqual = (test1, test2) => {\n    if (test1 === test2) {\n        return true;\n    }\n    if (!isObject(test1) || !isObject(test2)) {\n        return false;\n    }\n    const keys = Object.keys(test1);\n    if (keys.length !== Object.keys(test2).length) {\n        return false;\n    }\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (!hasOwnProperty.call(test2, key) || test1[key] !== test2[key]) {\n            return false;\n        }\n    }\n    return true;\n};\nexport default isShallowEqual;\n//# sourceMappingURL=shallowEqual.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/shallowEqual.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "variable",
    "name": "hasOwnProperty",
    "memberof": "ts_temp/is/shallowEqual.js",
    "static": true,
    "longname": "ts_temp/is/shallowEqual.js~hasOwnProperty",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/is/shallowEqual",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 279,
    "kind": "function",
    "name": "isShallowEqual",
    "memberof": "ts_temp/is/shallowEqual.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/shallowEqual.js~isShallowEqual",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/shallowEqual",
    "importStyle": "{isShallowEqual}",
    "description": "Returns `true` if its arguments are equivalent is shallow equal terms, `false` otherwise.",
    "examples": [
      "\n     isShallowEqual(1, 1); //=> true\n     isShallowEqual(1, '1'); //=> false\n     isShallowEqual([1, 2, 3], [1, 2, 3]); //=> true\n     isShallowEqual({ a: { b: 1 }}, { a: { b: 1 }}); //=> false"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "ts_temp/is/strictEqual.js",
    "content": "/**\n * Returns `true` if its arguments are equivalent is same value zero terms, `false` otherwise.\n *\n * @param {*} test1\n * @param {*} test2\n * @return {Boolean}\n * @example\n *\n *      isStrictEqual(1, 1); //=> true\n *      isStrictEqual(1, '1'); //=> false\n *      isStrictEqual({}, {}); //=> false\n *      isStrictEqual(NaN, NaN); //=> true\n *      isStrictEqual(-0, 0); //=> true\n */\nexport const isStrictEqual = (test1, test2) => {\n    // SameValue algorithm\n    if (test1 === test2) {\n        // Steps 6.b-6.e: +0 != -0\n        return test1 !== 0 || 1 / test1 === 1 / test2;\n    }\n    else {\n        // Step 6.a: NaN == NaN\n        return test1 !== test1 && test2 !== test2;\n    }\n};\nexport default isStrictEqual;\n//# sourceMappingURL=strictEqual.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/strictEqual.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "function",
    "name": "isStrictEqual",
    "memberof": "ts_temp/is/strictEqual.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/strictEqual.js~isStrictEqual",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/strictEqual",
    "importStyle": "{isStrictEqual}",
    "description": "Returns `true` if its arguments are equivalent is same value zero terms, `false` otherwise.",
    "examples": [
      "\n     isStrictEqual(1, 1); //=> true\n     isStrictEqual(1, '1'); //=> false\n     isStrictEqual({}, {}); //=> false\n     isStrictEqual(NaN, NaN); //=> true\n     isStrictEqual(-0, 0); //=> true"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 282,
    "kind": "file",
    "name": "ts_temp/is/string.js",
    "content": "/**\n * Checks if `test` is string.\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `value` is string, else `false`.\n * @example\n *\n * isString('test'); // => true\n * isString(new String('test')); // => true\n * isString(null); // => false\n */\nexport const isString = (test) => typeof test === 'string' || test instanceof String;\nexport default isString;\n//# sourceMappingURL=string.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/string.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 283,
    "kind": "function",
    "name": "isString",
    "memberof": "ts_temp/is/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/string.js~isString",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/string",
    "importStyle": "{isString}",
    "description": "Checks if `test` is string.",
    "examples": [
      "\nisString('test'); // => true\nisString(new String('test')); // => true\nisString(null); // => false"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `value` is string, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `value` is string, else `false`."
    }
  },
  {
    "__docId__": 284,
    "kind": "file",
    "name": "ts_temp/is/undefined.js",
    "content": "/**\n * Checks if `test` is `undefined`.\n *\n * @param {*} test The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * isUndefined(void 0); // => true\n * isUndefined(null);// => false\n */\nexport const isUndefined = (test) => typeof test === 'undefined';\nexport default isUndefined;\n//# sourceMappingURL=undefined.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/is/undefined.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 285,
    "kind": "function",
    "name": "isUndefined",
    "memberof": "ts_temp/is/undefined.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/is/undefined.js~isUndefined",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/is/undefined",
    "importStyle": "{isUndefined}",
    "description": "Checks if `test` is `undefined`.",
    "examples": [
      "\nisUndefined(void 0); // => true\nisUndefined(null);// => false"
    ],
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns `true` if `value` is `undefined`, else `false`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "The value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns `true` if `value` is `undefined`, else `false`."
    }
  },
  {
    "__docId__": 286,
    "kind": "file",
    "name": "ts_temp/isTrue.js",
    "content": "/**\n * Returns true if `val` is true or equal to string 'true'\n *\n * @param val\n * @returns {boolean}\n *\n * @example\n *\n *      isTrue(true) // => true\n *      isTrue('true') // => true\n *      isTrue([true]) // => false\n *      isTrue('false') // => false\n */\nexport const isTrue = ((val) => val === true || val === 'true');\nexport default isTrue;\n//# sourceMappingURL=isTrue.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/isTrue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "function",
    "name": "isTrue",
    "memberof": "ts_temp/isTrue.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/isTrue.js~isTrue",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/isTrue",
    "importStyle": "{isTrue}",
    "description": "Returns true if `val` is true or equal to string 'true'",
    "examples": [
      "\n     isTrue(true) // => true\n     isTrue('true') // => true\n     isTrue([true]) // => false\n     isTrue('false') // => false"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 288,
    "kind": "file",
    "name": "ts_temp/negate.js",
    "content": "/**\n * Negates its argument.\n *\n * @param {Number} n\n * @return {Number}\n * @example\n *\n *      negate(42); //=> -42\n */\nexport const negate = (n) => -n;\nexport default negate;\n//# sourceMappingURL=negate.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/negate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 289,
    "kind": "function",
    "name": "negate",
    "memberof": "ts_temp/negate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/negate.js~negate",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/negate",
    "importStyle": "{negate}",
    "description": "Negates its argument.",
    "examples": [
      "\n     negate(42); //=> -42"
    ],
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 290,
    "kind": "file",
    "name": "ts_temp/not.js",
    "content": "/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @param {*} val any value\n * @return {Boolean} the logical inverse of passed argument.\n * @example\n *\n *      not(true); //=> false\n *      not(false); //=> true\n *      not(0); //=> true\n *      not(1); //=> false\n */\nexport const not = (val) => !val;\nexport default not;\n//# sourceMappingURL=not.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/not.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 291,
    "kind": "function",
    "name": "not",
    "memberof": "ts_temp/not.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/not.js~not",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/not",
    "importStyle": "{not}",
    "description": "A function that returns the `!` of its argument. It will return `true` when\npassed false-y value, and `false` when passed a truth-y one.",
    "examples": [
      "\n     not(true); //=> false\n     not(false); //=> true\n     not(0); //=> true\n     not(1); //=> false"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "any value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "the logical inverse of passed argument."
    }
  },
  {
    "__docId__": 292,
    "kind": "file",
    "name": "ts_temp/object/all.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Tests whether every [key, value] pair in the object passes the test implemented by the provided function.\n *\n * @param {Function} fn The function to test for each [key, value] pair. Takes a predicate and an object.\n * @param {Object} obj The object whose enumerable own property [key, value] pairs are to be tested.\n * @return {Boolean} Returns `true` if the callback function returns a truthy value for every [key, value] pair, otherwise, false.\n * @example\n *\n *      var isBiggerThanZero = x => x > 0;\n *\n *      all(isBiggerThanZero, {}); //=> true\n *      all(isBiggerThanZero, { a: 1 }); //=> true\n *      all(isBiggerThanZero, { a: 1, b: 1, c: 1 }); //=> true\n *      all(isBiggerThanZero, { a: 0, b: 1, c: 0 }); //=> false\n *      all(isBiggerThanZero, { a: 1, b: 0, c: 1 }); //=> false\n *      all(isBiggerThanZero)({ a: 0, b: 0, c: 0 }); //=> false\n *      all(isBiggerThanZero)({ a: 1, b: 0, c: 1 }); //=> false\n */\nexport const all = curryN(2, (fn, obj = {}) => {\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && !fn(obj[key], key, obj)) {\n            return false;\n        }\n    }\n    return true;\n});\nexport default all;\n//# sourceMappingURL=all.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/all.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 293,
    "kind": "variable",
    "name": "all",
    "memberof": "ts_temp/object/all.js",
    "static": true,
    "longname": "ts_temp/object/all.js~all",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/all",
    "importStyle": "{all}",
    "description": "Tests whether every [key, value] pair in the object passes the test implemented by the provided function.",
    "examples": [
      "\n     var isBiggerThanZero = x => x > 0;\n\n     all(isBiggerThanZero, {}); //=> true\n     all(isBiggerThanZero, { a: 1 }); //=> true\n     all(isBiggerThanZero, { a: 1, b: 1, c: 1 }); //=> true\n     all(isBiggerThanZero, { a: 0, b: 1, c: 0 }); //=> false\n     all(isBiggerThanZero, { a: 1, b: 0, c: 1 }); //=> false\n     all(isBiggerThanZero)({ a: 0, b: 0, c: 0 }); //=> false\n     all(isBiggerThanZero)({ a: 1, b: 0, c: 1 }); //=> false"
    ],
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to test for each [key, value] pair. Takes a predicate and an object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object whose enumerable own property [key, value] pairs are to be tested."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns `true` if the callback function returns a truthy value for every [key, value] pair, otherwise, false."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "file",
    "name": "ts_temp/object/any.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Tests whether at least one [key, value] pair in the object passes the test implemented by the provided function.\n *\n * @param {Function} fn The function to test for each [key, value] pair. Takes a predicate and an object.\n * @param {Object} obj The object whose enumerable own property [key, value] pairs are to be tested.\n * @return {Boolean} Returns `true` if the callback function returns a truthy value for any [key, value] pair, otherwise, false.\n * @example\n *\n *      var isBiggerThanZero = x => x > 0;\n *\n *      any(isBiggerThanZero, {}); //=> false\n *      any(isBiggerThanZero, { a: 0 }); //=> false\n *      any(isBiggerThanZero, { a: 0, b: 1, c: 0 }); //=> true\n *      any(isBiggerThanZero, { a: 1, b: 0, c: -1 }); //=> true\n *      any(isBiggerThanZero)({ a: 0, b: 0, c: 0 }); //=> false\n *      any(isBiggerThanZero)({ a: 0, b: 1, c: 0 }); //=> true\n */\nexport const any = curryN(2, (fn, obj = {}) => {\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && fn(obj[key], key, obj)) {\n            return true;\n        }\n    }\n    return false;\n});\nexport default any;\n//# sourceMappingURL=any.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/any.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 295,
    "kind": "variable",
    "name": "any",
    "memberof": "ts_temp/object/any.js",
    "static": true,
    "longname": "ts_temp/object/any.js~any",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/any",
    "importStyle": "{any}",
    "description": "Tests whether at least one [key, value] pair in the object passes the test implemented by the provided function.",
    "examples": [
      "\n     var isBiggerThanZero = x => x > 0;\n\n     any(isBiggerThanZero, {}); //=> false\n     any(isBiggerThanZero, { a: 0 }); //=> false\n     any(isBiggerThanZero, { a: 0, b: 1, c: 0 }); //=> true\n     any(isBiggerThanZero, { a: 1, b: 0, c: -1 }); //=> true\n     any(isBiggerThanZero)({ a: 0, b: 0, c: 0 }); //=> false\n     any(isBiggerThanZero)({ a: 0, b: 1, c: 0 }); //=> true"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to test for each [key, value] pair. Takes a predicate and an object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object whose enumerable own property [key, value] pairs are to be tested."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns `true` if the callback function returns a truthy value for any [key, value] pair, otherwise, false."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "file",
    "name": "ts_temp/object/assoc.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. All non-primitive properties are\n * copied by reference.\n *\n * @deprecated use object/propSet instead\n * @param {String} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @example\n *\n *      assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nexport const assoc = curryN(3, (prop, val, obj = {}) => ({\n    ...obj,\n    [prop]: val,\n}));\nexport default assoc;\n//# sourceMappingURL=assoc.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/assoc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 297,
    "kind": "variable",
    "name": "assoc",
    "memberof": "ts_temp/object/assoc.js",
    "static": true,
    "longname": "ts_temp/object/assoc.js~assoc",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/assoc",
    "importStyle": "{assoc}",
    "description": "Makes a shallow clone of an object, setting or overriding the specified\nproperty with the given value. All non-primitive properties are\ncopied by reference.",
    "examples": [
      "\n     assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}"
    ],
    "lineNumber": 16,
    "deprecated": "use object/propSet instead",
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prop",
        "description": "The property name to set"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "The new value"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to clone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A new object equivalent to the original except for the changed property."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "ts_temp/object/defaults.js",
    "content": "import curryN from '../function/curryN';\nimport objectKeys from './keys';\n/**\n * Assigns own and inherited enumerable string keyed properties of source objects to the destination object for\n * all destination properties that resolve to undefined. Source objects are applied from left to right.\n *\n * Once a property is set, additional values of the same property are ignored.\n *\n * @param {...Object} sources\n * @return {Object}\n * @example\n *\n * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n * // => { 'user': 'barney', 'age': 36 }\n */\nexport const defaults = curryN(2, (...sources) => {\n    const result = sources[0] || {};\n    for (let i = 1; i < sources.length; i++) {\n        const src = sources[i];\n        if (!src) {\n            continue;\n        }\n        const keys = objectKeys(src);\n        for (let j = 0; j < keys.length; j++) {\n            const key = keys[j];\n            const value = src[key];\n            const res = result[key];\n            if (res === undefined) {\n                result[key] = value;\n            }\n        }\n    }\n    return result;\n});\nexport default defaults;\n//# sourceMappingURL=defaults.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/defaults.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "variable",
    "name": "defaults",
    "memberof": "ts_temp/object/defaults.js",
    "static": true,
    "longname": "ts_temp/object/defaults.js~defaults",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/defaults",
    "importStyle": "{defaults}",
    "description": "Assigns own and inherited enumerable string keyed properties of source objects to the destination object for\nall destination properties that resolve to undefined. Source objects are applied from left to right.\n\nOnce a property is set, additional values of the same property are ignored.",
    "examples": [
      "\ndefaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n// => { 'user': 'barney', 'age': 36 }"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "sources",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "file",
    "name": "ts_temp/object/defaultsDeep.js",
    "content": "import curryN from '../function/curryN';\nimport isPlainObject from '../is/plainObject';\nimport objectKeys from './keys';\n/**\n * This method is like 'defaults' except that it recursively assigns default properties.\n *\n * @param {...Object} sources\n * @return {Object}\n * @example\n *\n * defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n * // => { 'a': { 'b': 2, 'c': 3 } }\n */\nexport const defaultsDeep = curryN(2, (...sources) => {\n    const result = sources[0] || {};\n    for (let i = 1; i < sources.length; i++) {\n        const src = sources[i];\n        if (!src) {\n            continue;\n        }\n        const keys = objectKeys(src);\n        for (let j = 0; j < keys.length; j++) {\n            const key = keys[j];\n            const value = src[key];\n            const res = result[key];\n            if (isPlainObject(res) && isPlainObject(value)) {\n                result[key] = defaultsDeep(res, value);\n            }\n            else if (res === undefined) {\n                result[key] = value;\n            }\n        }\n    }\n    return result;\n});\nexport default defaultsDeep;\n//# sourceMappingURL=defaultsDeep.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/defaultsDeep.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "variable",
    "name": "defaultsDeep",
    "memberof": "ts_temp/object/defaultsDeep.js",
    "static": true,
    "longname": "ts_temp/object/defaultsDeep.js~defaultsDeep",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/defaultsDeep",
    "importStyle": "{defaultsDeep}",
    "description": "This method is like 'defaults' except that it recursively assigns default properties.",
    "examples": [
      "\ndefaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n// => { 'a': { 'b': 2, 'c': 3 } }"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "sources",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "file",
    "name": "ts_temp/object/each.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Iterate over an input `object`, calling a provided function `fn` for each\n * key and value in the object.\n *\n * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The object to iterate over.\n * @return {Object} The original object.\n * @example\n *\n *      var printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n *      each(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n *      // logs x:1\n *      // logs y:2\n */\nexport const each = curryN(2, (fn, obj = {}) => {\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(obj[key], key, obj);\n        }\n    }\n});\nexport default each;\n//# sourceMappingURL=each.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/each.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 303,
    "kind": "variable",
    "name": "each",
    "memberof": "ts_temp/object/each.js",
    "static": true,
    "longname": "ts_temp/object/each.js~each",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/each",
    "importStyle": "{each}",
    "description": "Iterate over an input `object`, calling a provided function `fn` for each\nkey and value in the object.",
    "examples": [
      "\n     var printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n     each(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n     // logs x:1\n     // logs y:2"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to invoke. Receives three argument, `value`, `key`, `obj`."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to iterate over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The original object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "file",
    "name": "ts_temp/object/eqProps.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Reports whether two objects have the same value, in equal\n * terms, for the specified property. Useful as a curried predicate.\n *\n * @param {String} prop The name of the property to compare\n * @param {Object} obj1\n * @param {Object} obj2\n * @return {Boolean}\n *\n * @example\n *\n *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n *      eqProps('a', o1, o2); //=> false\n *      eqProps('c', o1, o2); //=> true\n */\nexport const eqProps = curryN(3, (prop, obj1, obj2) => {\n    return obj1 != null && obj2 != null ? obj1[prop] === obj2[prop] : undefined;\n});\nexport default eqProps;\n//# sourceMappingURL=eqProps.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/eqProps.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 305,
    "kind": "variable",
    "name": "eqProps",
    "memberof": "ts_temp/object/eqProps.js",
    "static": true,
    "longname": "ts_temp/object/eqProps.js~eqProps",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/eqProps",
    "importStyle": "{eqProps}",
    "description": "Reports whether two objects have the same value, in equal\nterms, for the specified property. Useful as a curried predicate.",
    "examples": [
      "\n     var o1 = { a: 1, b: 2, c: 3, d: 4 };\n     var o2 = { a: 10, b: 20, c: 3, d: 40 };\n     eqProps('a', o1, o2); //=> false\n     eqProps('c', o1, o2); //=> true"
    ],
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prop",
        "description": "The name of the property to compare"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "file",
    "name": "ts_temp/object/filter.js",
    "content": "import curryN from '../function/curryN';\nimport objectKeys from './keys';\n/**\n * Takes a predicate and a object, and returns a new object\n * containing only members which satisfy the\n * given predicate.\n *\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nexport const filter = curryN(2, (fn, obj = {}) => {\n    const keys = objectKeys(obj);\n    const result = {};\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (fn(obj[key], key, obj)) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n});\nexport default filter;\n//# sourceMappingURL=filter.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/filter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 307,
    "kind": "variable",
    "name": "filter",
    "memberof": "ts_temp/object/filter.js",
    "static": true,
    "longname": "ts_temp/object/filter.js~filter",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/filter",
    "importStyle": "{filter}",
    "description": "Takes a predicate and a object, and returns a new object\ncontaining only members which satisfy the\ngiven predicate.",
    "examples": [
      "\n     var isEven = n => n % 2 === 0;\n\n     filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "ts_temp/object/findKey.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns first key in `obj` satisfied to `fn`, or undefined if there is no such keys\n *\n * @param {Function} fn Receives three argument, `value`, `key`, `obj`\n * @param {Object} obj\n * @returns {String|undefined}\n *\n * @example\n *\n *      findKey(identity, {a: 0, b: 3}) // => 'b'\n *      findKey(x => x > 3, { a: 2, b: 1 }) // => undefined\n *      findKey(x => x > 3, { a: 4, b: 5 }) // => 'a'\n */\nexport const findKey = curryN(2, (fn, obj = {}) => {\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            if (fn(obj[key], key, obj)) {\n                return key;\n            }\n        }\n    }\n});\nexport default findKey;\n//# sourceMappingURL=findKey.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/findKey.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "variable",
    "name": "findKey",
    "memberof": "ts_temp/object/findKey.js",
    "static": true,
    "longname": "ts_temp/object/findKey.js~findKey",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/findKey",
    "importStyle": "{findKey}",
    "description": "Returns first key in `obj` satisfied to `fn`, or undefined if there is no such keys",
    "examples": [
      "\n     findKey(identity, {a: 0, b: 3}) // => 'b'\n     findKey(x => x > 3, { a: 2, b: 1 }) // => undefined\n     findKey(x => x > 3, { a: 4, b: 5 }) // => 'a'"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String|undefined}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Receives three argument, `value`, `key`, `obj`"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String",
        "undefined"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "file",
    "name": "ts_temp/object/fromPairs.js",
    "content": "/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @param {Array} arr An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @example\n *\n *      fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\nexport const fromPairs = ((arr = []) => {\n    const result = {};\n    for (let i = 0; i < arr.length; i++) {\n        result[arr[i][0]] = arr[i][1];\n    }\n    return result;\n});\nexport default fromPairs;\n//# sourceMappingURL=fromPairs.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/fromPairs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 311,
    "kind": "function",
    "name": "fromPairs",
    "memberof": "ts_temp/object/fromPairs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/object/fromPairs.js~fromPairs",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/fromPairs",
    "importStyle": "{fromPairs}",
    "description": "Creates a new object from a list key-value pairs. If a key appears in\nmultiple pairs, the rightmost pair is included in the object.",
    "examples": [
      "\n     fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}"
    ],
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "An array of two-element arrays that will be the keys and values of the output object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The object made by pairing up `keys` and `values`."
    }
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "ts_temp/object/groupBy.js",
    "content": "import curryN from '../function/curryN';\nimport objectKeys from './keys';\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of object thru `fn`. The corresponding\n * value of each key is an array of elements responsible for generating the key.\n *\n * @param {Function} fn The function to transform value to group key. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The obj to iterate over.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * groupBy(x => x, { a: 1, b: 1, c: 3});// => { '1': [1, 1], '3': [3] }\n */\nexport const groupBy = curryN(2, (fn, obj = {}) => {\n    const result = {};\n    const keys = objectKeys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const groupValue = fn(obj[key], key, obj);\n        if (!result[groupValue]) {\n            result[groupValue] = [];\n        }\n        result[groupValue].push(obj[key]);\n    }\n    return result;\n});\nexport default groupBy;\n//# sourceMappingURL=groupBy.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/groupBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "variable",
    "name": "groupBy",
    "memberof": "ts_temp/object/groupBy.js",
    "static": true,
    "longname": "ts_temp/object/groupBy.js~groupBy",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/groupBy",
    "importStyle": "{groupBy}",
    "description": "Creates an object composed of keys generated from the results of running\neach element of object thru `fn`. The corresponding\nvalue of each key is an array of elements responsible for generating the key.",
    "examples": [
      "\ngroupBy(x => x, { a: 1, b: 1, c: 3});// => { '1': [1, 1], '3': [3] }"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Returns the composed aggregate object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to transform value to group key. Receives three argument, `value`, `key`, `obj`."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The obj to iterate over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns the composed aggregate object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "file",
    "name": "ts_temp/object/has.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns whether or not an object has an own property with the specified name\n *\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      var hasName = has('name');\n *      hasName({name: 'alice'});   //=> true\n *      hasName({name: 'bob'});     //=> true\n *      hasName({});                //=> false\n */\nexport const has = curryN(2, (prop, obj) => obj != null && Object.prototype.hasOwnProperty.call(obj, prop));\nexport default has;\n//# sourceMappingURL=has.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/has.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "variable",
    "name": "has",
    "memberof": "ts_temp/object/has.js",
    "static": true,
    "longname": "ts_temp/object/has.js~has",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/has",
    "importStyle": "{has}",
    "description": "Returns whether or not an object has an own property with the specified name",
    "examples": [
      "\n     var hasName = has('name');\n     hasName({name: 'alice'});   //=> true\n     hasName({name: 'bob'});     //=> true\n     hasName({});                //=> false"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prop",
        "description": "The name of the property to check for."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to query."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the property exists."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "file",
    "name": "ts_temp/object/keyBy.js",
    "content": "import curryN from '../function/curryN';\nimport objectKeys from './keys';\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of object thru `fn`. The corresponding value of\n * each key is the last element responsible for generating the key\n *\n * @param {Function} fn The function to transform value to group key. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The obj to iterate over.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * keyBy(x => x < 2, { a: 0, b: 1, c: 3});// => { false: 1, true: 3 }\n */\nexport const keyBy = curryN(2, (fn, obj = {}) => {\n    const result = {};\n    const keys = objectKeys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const groupValue = fn(obj[key], key, obj);\n        result[groupValue] = obj[key];\n    }\n    return result;\n});\nexport default keyBy;\n//# sourceMappingURL=keyBy.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/keyBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "variable",
    "name": "keyBy",
    "memberof": "ts_temp/object/keyBy.js",
    "static": true,
    "longname": "ts_temp/object/keyBy.js~keyBy",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/keyBy",
    "importStyle": "{keyBy}",
    "description": "Creates an object composed of keys generated from the results of running\neach element of object thru `fn`. The corresponding value of\neach key is the last element responsible for generating the key",
    "examples": [
      "\nkeyBy(x => x < 2, { a: 0, b: 1, c: 3});// => { false: 1, true: 3 }"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Returns the composed aggregate object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to transform value to group key. Receives three argument, `value`, `key`, `obj`."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The obj to iterate over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns the composed aggregate object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "ts_temp/object/keys.js",
    "content": "import isObject from '../is/object';\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @example\n *\n *      keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nexport const keys = ((obj) => (isObject(obj) ? Object.keys(obj) : []));\nexport default keys;\n//# sourceMappingURL=keys.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/keys.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "function",
    "name": "keys",
    "memberof": "ts_temp/object/keys.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/object/keys.js~keys",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/keys",
    "importStyle": "{keys}",
    "description": "Returns a list containing the names of all the enumerable own properties of\nthe supplied object.\nNote that the order of the output array is not guaranteed to be consistent\nacross different JS platforms.",
    "examples": [
      "\n     keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to extract properties from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of the object's own properties."
    }
  },
  {
    "__docId__": 320,
    "kind": "file",
    "name": "ts_temp/object/map.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Applies `fn` to each of the `obj` values, and returns new object.\n *\n * @param {Function} fn The function to be called on every value of the input `obj`. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The object to be iterated over.\n * @return {Object} The new object.\n * @example\n *\n *      var double = x => x * 2;\n *\n *      map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n */\nexport const map = curryN(2, (fn, obj = {}) => {\n    const result = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result[key] = fn(obj[key], key, obj);\n        }\n    }\n    return result;\n});\nexport default map;\n//# sourceMappingURL=map.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 321,
    "kind": "variable",
    "name": "map",
    "memberof": "ts_temp/object/map.js",
    "static": true,
    "longname": "ts_temp/object/map.js~map",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/map",
    "importStyle": "{map}",
    "description": "Applies `fn` to each of the `obj` values, and returns new object.",
    "examples": [
      "\n     var double = x => x * 2;\n\n     map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to be called on every value of the input `obj`. Receives three argument, `value`, `key`, `obj`."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to be iterated over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The new object."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "file",
    "name": "ts_temp/object/merge.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the others objects. If a key exists in several objects,\n * the value from the last object will be used.\n *\n * @param {...Object} sources\n * @return {Object}\n * @example\n *\n * merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 }); //=> { 'name': 'fred', 'age': 40 }\n */\nexport const merge = curryN(2, (target, ...sources) => Object.assign(target, ...sources));\nexport default merge;\n//# sourceMappingURL=merge.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/merge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 323,
    "kind": "variable",
    "name": "merge",
    "memberof": "ts_temp/object/merge.js",
    "static": true,
    "longname": "ts_temp/object/merge.js~merge",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/merge",
    "importStyle": "{merge}",
    "description": "Create a new object with the own properties of the first object merged with\nthe own properties of the others objects. If a key exists in several objects,\nthe value from the last object will be used.",
    "examples": [
      "\nmerge({ 'name': 'fred', 'age': 10 }, { 'age': 40 }); //=> { 'name': 'fred', 'age': 40 }"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "sources",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "file",
    "name": "ts_temp/object/mergeDeep.js",
    "content": "import curryN from '../function/curryN';\nimport isPlainObject from '../is/plainObject';\nimport objectKeys from './keys';\n/**\n * Create a new object with the own properties of the first object deeply merged with\n * the own properties of the other objects. If a key exists in several objects, then all values associated with this key\n * are merged recursively unless at least one of them is not a plain object. Merging is done from left to right.\n *\n * @param {...Object} sources\n * @return {Object}\n * @example\n *\n * mergeDeep({ 'name': 'fred', 'info': { 'age': 10, 'sex': 'm' } }, { 'info': { 'age': 40 }); //=> { 'name': 'fred', 'info': { 'age': 40, 'sex': 'm' } }\n */\nexport const mergeDeep = curryN(2, (...sources) => {\n    const result = sources[0] || {};\n    for (let i = 1; i < sources.length; i++) {\n        const src = sources[i];\n        if (!src) {\n            continue;\n        }\n        const keys = objectKeys(src);\n        for (let j = 0; j < keys.length; j++) {\n            const key = keys[j];\n            const value = src[key];\n            const res = result[key];\n            if (isPlainObject(res) && isPlainObject(value)) {\n                result[key] = mergeDeep(res, value);\n            }\n            else {\n                result[key] = value;\n            }\n        }\n    }\n    return result;\n});\nexport default mergeDeep;\n//# sourceMappingURL=mergeDeep.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/mergeDeep.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 325,
    "kind": "variable",
    "name": "mergeDeep",
    "memberof": "ts_temp/object/mergeDeep.js",
    "static": true,
    "longname": "ts_temp/object/mergeDeep.js~mergeDeep",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/mergeDeep",
    "importStyle": "{mergeDeep}",
    "description": "Create a new object with the own properties of the first object deeply merged with\nthe own properties of the other objects. If a key exists in several objects, then all values associated with this key\nare merged recursively unless at least one of them is not a plain object. Merging is done from left to right.",
    "examples": [
      "\nmergeDeep({ 'name': 'fred', 'info': { 'age': 10, 'sex': 'm' } }, { 'info': { 'age': 40 }); //=> { 'name': 'fred', 'info': { 'age': 40, 'sex': 'm' } }"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "sources",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "file",
    "name": "ts_temp/object/mergeWith.js",
    "content": "import curryN from '../function/curryN';\nimport objectKeys from './keys';\nimport assign from '../assign';\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the others objects. If a key exists in several objects\n * provided `fn` will be called and should return resolve value\n *\n * @param {Function} fn function to call if prop conflict appear. Receives three argument, `valueLeft`, `valueRight`,\n * `key`, `leftObj`, `rightObj`.\n * @param {...Object} sources\n * @return {Object}\n * @example\n *\n * mergeWith((x, y) => x + y, { 'name': 'fred', 'age': 10 }, { 'age': 40 }); //=> { 'name': 'fred', 'age': 50 }\n */\nexport const mergeWith = curryN(3, (fn, ...sources) => {\n    const result = assign(sources[0]);\n    for (let i = 1; i < sources.length; i++) {\n        const source = sources[i];\n        const keys = objectKeys(source);\n        for (let j = 0; j < keys.length; j++) {\n            const key = keys[j];\n            if (Object.prototype.hasOwnProperty.call(result, key)) {\n                result[key] = fn(result[key], source[key], key, result, source);\n            }\n            else {\n                result[key] = source[key];\n            }\n        }\n    }\n    return result;\n});\nexport default mergeWith;\n//# sourceMappingURL=mergeWith.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/mergeWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 327,
    "kind": "variable",
    "name": "mergeWith",
    "memberof": "ts_temp/object/mergeWith.js",
    "static": true,
    "longname": "ts_temp/object/mergeWith.js~mergeWith",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/mergeWith",
    "importStyle": "{mergeWith}",
    "description": "Create a new object with the own properties of the first object merged with\nthe own properties of the others objects. If a key exists in several objects\nprovided `fn` will be called and should return resolve value",
    "examples": [
      "\nmergeWith((x, y) => x + y, { 'name': 'fred', 'age': 10 }, { 'age': 40 }); //=> { 'name': 'fred', 'age': 50 }"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "function to call if prop conflict appear. Receives three argument, `valueLeft`, `valueRight`,\n`key`, `leftObj`, `rightObj`."
      },
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "sources",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "file",
    "name": "ts_temp/object/objOf.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Creates an object containing a single key:value pair.\n *\n * @param {String} key\n * @param {*} value\n * @return {Object}\n * @example\n *\n *      objOf('key', 5) // => { key: 5 }\n */\nexport const objOf = curryN(2, (key, value) => ({ [key]: value }));\nexport default objOf;\n//# sourceMappingURL=objOf.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/objOf.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 329,
    "kind": "variable",
    "name": "objOf",
    "memberof": "ts_temp/object/objOf.js",
    "static": true,
    "longname": "ts_temp/object/objOf.js~objOf",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/objOf",
    "importStyle": "{objOf}",
    "description": "Creates an object containing a single key:value pair.",
    "examples": [
      "\n     objOf('key', 5) // => { key: 5 }"
    ],
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "file",
    "name": "ts_temp/object/omit.js",
    "content": "import curryN from '../function/curryN';\nimport objectKeys from './keys';\n/**\n * Returns a partial copy of an object omitting the keys specified.\n *\n * @param {Array} props an array of String property names to omit from the new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with properties from `names` not on it.\n * @example\n *\n *      omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n */\nexport const omit = curryN(2, (props = [], obj = {}) => {\n    const propsSet = Object.create(null);\n    for (let i = 0; i < props.length; i++) {\n        propsSet[props[i]] = true;\n    }\n    const result = {};\n    const keys = objectKeys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const prop = keys[i];\n        if (!propsSet[prop]) {\n            result[prop] = obj[prop];\n        }\n    }\n    return result;\n});\nexport default omit;\n//# sourceMappingURL=omit.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/omit.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 331,
    "kind": "variable",
    "name": "omit",
    "memberof": "ts_temp/object/omit.js",
    "static": true,
    "longname": "ts_temp/object/omit.js~omit",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/omit",
    "importStyle": "{omit}",
    "description": "Returns a partial copy of an object omitting the keys specified.",
    "examples": [
      "\n     omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "an array of String property names to omit from the new object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to copy from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A new object with properties from `names` not on it."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "file",
    "name": "ts_temp/object/path.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Retrieve the value at a given path.\n *\n * @param {[String]} paths The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @example\n *\n *      path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      path(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\nexport const path = curryN(2, (paths = [], obj = {}) => {\n    let val = obj;\n    for (let i = 0; i < paths.length; i++) {\n        if (val == null) {\n            return;\n        }\n        val = val[paths[i]];\n    }\n    return val;\n});\nexport default path;\n//# sourceMappingURL=path.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/path.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "variable",
    "name": "path",
    "memberof": "ts_temp/object/path.js",
    "static": true,
    "longname": "ts_temp/object/path.js~path",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/path",
    "importStyle": "{path}",
    "description": "Retrieve the value at a given path.",
    "examples": [
      "\n     path(['a', 'b'], {a: {b: 2}}); //=> 2\n     path(['a', 'b'], {c: {b: 2}}); //=> undefined"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "[String]"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "The path to use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to retrieve the nested property from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The data at `path`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "file",
    "name": "ts_temp/object/pathApply.js",
    "content": "import curryN from '../function/curryN';\nimport path from './path';\n/**\n * Returns the result of `fn` with given value at `path`.\n *\n * @param {[String]} paths The path to use.\n * @param {Function} fn function to apply\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} result of calling fn with nested property.\n *\n * @example\n *\n *      pathApply(['a', 'b'], x => 'is ' + x, {a: {b: 2}}); //=> is 2\n *      pathApply(['a', 'b'], x => x > 0, {a: {b: 2}}); //=> true\n */\nexport const pathApply = curryN(3, (paths = [], fn, obj = {}) => fn(path(paths, obj), paths, obj));\nexport default pathApply;\n//# sourceMappingURL=pathApply.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/pathApply.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 335,
    "kind": "variable",
    "name": "pathApply",
    "memberof": "ts_temp/object/pathApply.js",
    "static": true,
    "longname": "ts_temp/object/pathApply.js~pathApply",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/pathApply",
    "importStyle": "{pathApply}",
    "description": "Returns the result of `fn` with given value at `path`.",
    "examples": [
      "\n     pathApply(['a', 'b'], x => 'is ' + x, {a: {b: 2}}); //=> is 2\n     pathApply(['a', 'b'], x => x > 0, {a: {b: 2}}); //=> true"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "[String]"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "The path to use."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "function to apply"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to retrieve the nested property from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "result of calling fn with nested property."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "file",
    "name": "ts_temp/object/pathEq.js",
    "content": "import curryN from '../function/curryN';\nimport path from './path';\n/**\n * Determines whether a nested path on an object has a specific value\n *\n * @param {Array} paths The path of the nested property to use\n * @param {*} value The value to compare the nested property with\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value is the nested object property,\n *         `false` otherwise.\n * @example\n *\n *      var user1 = { address: { zipCode: 90210 } };\n *      var user2 = { address: { zipCode: 55555 } };\n *      var user3 = { name: 'Bob' };\n *      var users = [ user1, user2, user3 ];\n *      var isFamous = pathEq(['address', 'zipCode'], 90210);\n *      filter(isFamous, users); //=> [ user1 ]\n */\nexport const pathEq = curryN(3, (paths = [], value, obj = {}) => path(paths, obj) === value);\nexport default pathEq;\n//# sourceMappingURL=pathEq.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/pathEq.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 337,
    "kind": "variable",
    "name": "pathEq",
    "memberof": "ts_temp/object/pathEq.js",
    "static": true,
    "longname": "ts_temp/object/pathEq.js~pathEq",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/pathEq",
    "importStyle": "{pathEq}",
    "description": "Determines whether a nested path on an object has a specific value",
    "examples": [
      "\n     var user1 = { address: { zipCode: 90210 } };\n     var user2 = { address: { zipCode: 55555 } };\n     var user3 = { name: 'Bob' };\n     var users = [ user1, user2, user3 ];\n     var isFamous = pathEq(['address', 'zipCode'], 90210);\n     filter(isFamous, users); //=> [ user1 ]"
    ],
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "The path of the nested property to use"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to compare the nested property with"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to check the nested property in"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "`true` if the value is the nested object property,\n        `false` otherwise."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "file",
    "name": "ts_temp/object/pathOr.js",
    "content": "import curryN from '../function/curryN';\nimport path from './path';\n/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @param {[String]} paths The path to use.\n * @param {*} value The default value.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      pathOr(['a', 'b'],'N/A', {a: {b: 2}}); //=> 2\n *      pathOr(['a', 'b'], 'N/A', {c: {b: 2}}); //=> \"N/A\"\n */\nexport const pathOr = curryN(3, (paths = [], value, obj = {}) => {\n    const v = path(paths, obj);\n    return v != null ? v : value;\n});\nexport default pathOr;\n//# sourceMappingURL=pathOr.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/pathOr.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 339,
    "kind": "variable",
    "name": "pathOr",
    "memberof": "ts_temp/object/pathOr.js",
    "static": true,
    "longname": "ts_temp/object/pathOr.js~pathOr",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/pathOr",
    "importStyle": "{pathOr}",
    "description": "If the given, non-null object has a value at the given path, returns the\nvalue at that path. Otherwise returns the provided default value.",
    "examples": [
      "\n     pathOr(['a', 'b'],'N/A', {a: {b: 2}}); //=> 2\n     pathOr(['a', 'b'], 'N/A', {c: {b: 2}}); //=> \"N/A\""
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "[String]"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "The path to use."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The default value."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to retrieve the nested property from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The data at `path` of the supplied object or the default value."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "file",
    "name": "ts_temp/object/pathSet.js",
    "content": "import curryN from '../function/curryN';\nimport isObject from '../is/object';\nimport isNumber from '../is/number';\nimport has from './has';\nimport assign from '../assign';\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given paths to the given value.\n *\n * **Note:** If property in the object is equal to value by reference then function\n * just returns object without changes\n *\n * @param {[String]} paths\n * @param {*} value\n * @param {Object} obj\n * @return {Object}\n * @example\n *\n *      pathSet(['a', 'b'], 3, {}) // => { a: { b: 3 } }\n */\nexport const pathSet = curryN(3, (paths = [], value, obj = {}) => {\n    const n = paths.length - 1;\n    const result = assign(obj);\n    const key = paths[n];\n    let val = result;\n    let v;\n    for (let i = 0; i < n; i++) {\n        v = val[paths[i]];\n        if (isObject(v)) {\n            v = assign(v);\n        }\n        else {\n            v = isNumber(paths[i + 1]) ? [] : {};\n        }\n        val[paths[i]] = v;\n        val = v;\n    }\n    if (has(key, val) && val[key] === value) {\n        return obj;\n    }\n    val[key] = value;\n    return result;\n});\nexport default pathSet;\n//# sourceMappingURL=pathSet.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/pathSet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 341,
    "kind": "variable",
    "name": "pathSet",
    "memberof": "ts_temp/object/pathSet.js",
    "static": true,
    "longname": "ts_temp/object/pathSet.js~pathSet",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/pathSet",
    "importStyle": "{pathSet}",
    "description": "Returns the result of \"setting\" the portion of the given data structure\nfocused by the given paths to the given value.\n\n**Note:** If property in the object is equal to value by reference then function\njust returns object without changes",
    "examples": [
      "\n     pathSet(['a', 'b'], 3, {}) // => { a: { b: 3 } }"
    ],
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "[String]"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "file",
    "name": "ts_temp/object/pathSetBy.js",
    "content": "import curryN from '../function/curryN';\nimport isObject from '../is/object';\nimport isNumber from '../is/number';\nimport has from './has';\nimport assign from '../assign';\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given paths to the result of `fn` call.\n *\n * **Note:** If property in the object is equal to value by reference then function\n * just returns object without changes\n *\n * @param {[String]} paths\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @example\n *\n *      pathSetBy(['a', 'b'], x => x+1, {a: { b:1 }}) // => { a: { b: 2 } }\n */\nexport const pathSetBy = curryN(3, (paths = [], fn, obj = {}) => {\n    const n = paths.length - 1;\n    const result = assign(obj);\n    const key = paths[n];\n    let val = result;\n    let v;\n    for (let i = 0; i < n; i++) {\n        v = val[paths[i]];\n        if (isObject(v)) {\n            v = assign(v);\n        }\n        else {\n            v = isNumber(paths[i + 1]) ? [] : {};\n        }\n        val[paths[i]] = v;\n        val = v;\n    }\n    const res = fn(val[key], paths, obj);\n    if (has(key, val) && val[key] === res) {\n        return obj;\n    }\n    val[key] = res;\n    return result;\n});\nexport default pathSetBy;\n//# sourceMappingURL=pathSetBy.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/pathSetBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "variable",
    "name": "pathSetBy",
    "memberof": "ts_temp/object/pathSetBy.js",
    "static": true,
    "longname": "ts_temp/object/pathSetBy.js~pathSetBy",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/pathSetBy",
    "importStyle": "{pathSetBy}",
    "description": "Returns the result of \"setting\" the portion of the given data structure\nfocused by the given paths to the result of `fn` call.\n\n**Note:** If property in the object is equal to value by reference then function\njust returns object without changes",
    "examples": [
      "\n     pathSetBy(['a', 'b'], x => x+1, {a: { b:1 }}) // => { a: { b: 2 } }"
    ],
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "[String]"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "file",
    "name": "ts_temp/object/pick.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns a partial copy of an object containing only the keys specified. If\n * the key does not exist, the property is ignored.\n *\n * @param {[String]} props an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @example\n *\n *      pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n */\nexport const pick = curryN(2, (props = [], obj = {}) => {\n    const result = {};\n    for (let i = 0; i < props.length; i++) {\n        const prop = props[i];\n        if (prop in obj) {\n            result[prop] = obj[prop];\n        }\n    }\n    return result;\n});\nexport default pick;\n//# sourceMappingURL=pick.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/pick.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 345,
    "kind": "variable",
    "name": "pick",
    "memberof": "ts_temp/object/pick.js",
    "static": true,
    "longname": "ts_temp/object/pick.js~pick",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/pick",
    "importStyle": "{pick}",
    "description": "Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.",
    "examples": [
      "\n     pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "[String]"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "an array of String property names to copy onto a new object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to copy from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A new object with only properties from `names` on it."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "file",
    "name": "ts_temp/object/pickBy.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns a partial copy of an object containing only the keys with `fn` predicate returns true\n *\n * @param {Function} fn predicate to pick keys. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @example\n *\n *      pickBy(x => x > 2, {a: 1, b: 2, c: 3, d: 4}); //=> {c: 3, d: 4}\n */\nexport const pickBy = curryN(2, (fn, obj = {}) => {\n    const result = {};\n    for (const prop in obj) {\n        if (fn(obj[prop], prop, obj)) {\n            result[prop] = obj[prop];\n        }\n    }\n    return result;\n});\nexport default pickBy;\n//# sourceMappingURL=pickBy.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/pickBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "variable",
    "name": "pickBy",
    "memberof": "ts_temp/object/pickBy.js",
    "static": true,
    "longname": "ts_temp/object/pickBy.js~pickBy",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/pickBy",
    "importStyle": "{pickBy}",
    "description": "Returns a partial copy of an object containing only the keys with `fn` predicate returns true",
    "examples": [
      "\n     pickBy(x => x > 2, {a: 1, b: 2, c: 3, d: 4}); //=> {c: 3, d: 4}"
    ],
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "predicate to pick keys. Receives three argument, `value`, `key`, `obj`."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to copy from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A new object with only properties from `names` on it."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "file",
    "name": "ts_temp/object/prop.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @param {String} prop The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n *\n * @example\n *\n *      prop('x', {x: 100}); //=> 100\n *      prop('x', {}); //=> undefined\n */\nexport const prop = curryN(2, (prop, obj) => (obj != null ? obj[prop] : undefined));\nexport default prop;\n//# sourceMappingURL=prop.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/prop.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 349,
    "kind": "variable",
    "name": "prop",
    "memberof": "ts_temp/object/prop.js",
    "static": true,
    "longname": "ts_temp/object/prop.js~prop",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/prop",
    "importStyle": "{prop}",
    "description": "Returns a function that when supplied an object returns the indicated\nproperty of that object, if it exists.",
    "examples": [
      "\n     prop('x', {x: 100}); //=> 100\n     prop('x', {}); //=> undefined"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prop",
        "description": "The property name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to query"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The value at `obj.p`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "file",
    "name": "ts_temp/object/propApply.js",
    "content": "import curryN from '../function/curryN';\nimport prop from './prop';\n/**\n * Returns the result of `fn` with value of property in `obj`.\n *\n * @param {String} propName The property name to apply.\n * @param {Function} fn function to apply\n * @param {Object} obj The object to retrieve the property from.\n * @return {*} result of calling fn with property.\n *\n * @example\n *\n *      propApply('a', x => 'is ' + x, {a: 2}); //=> is 2\n *      propApply('b', x => x > 0, {b: 2}); //=> true\n */\nexport const propApply = curryN(3, (propName, fn, obj) => fn(prop(propName, obj), propName, obj));\nexport default propApply;\n//# sourceMappingURL=propApply.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/propApply.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 351,
    "kind": "variable",
    "name": "propApply",
    "memberof": "ts_temp/object/propApply.js",
    "static": true,
    "longname": "ts_temp/object/propApply.js~propApply",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/propApply",
    "importStyle": "{propApply}",
    "description": "Returns the result of `fn` with value of property in `obj`.",
    "examples": [
      "\n     propApply('a', x => 'is ' + x, {a: 2}); //=> is 2\n     propApply('b', x => x > 0, {b: 2}); //=> true"
    ],
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "propName",
        "description": "The property name to apply."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "function to apply"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to retrieve the property from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "result of calling fn with property."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "file",
    "name": "ts_temp/object/propEq.js",
    "content": "import curryN from '../function/curryN';\nimport prop from './prop';\n/**\n * Returns `true` if the specified object property is equal to the given value; `false` otherwise.\n *\n * @param {String} propName\n * @param {*} value\n * @param {*} obj\n * @return {Boolean}\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n *      var kids = [abby, fred, rusty, alois];\n *      var hasBrownHair = propEq('hair', 'brown');\n *      filter(hasBrownHair, kids); //=> [fred, rusty]\n */\nexport const propEq = curryN(3, (propName, value, obj) => prop(propName, obj) === value);\nexport default propEq;\n//# sourceMappingURL=propEq.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/propEq.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 353,
    "kind": "variable",
    "name": "propEq",
    "memberof": "ts_temp/object/propEq.js",
    "static": true,
    "longname": "ts_temp/object/propEq.js~propEq",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/propEq",
    "importStyle": "{propEq}",
    "description": "Returns `true` if the specified object property is equal to the given value; `false` otherwise.",
    "examples": [
      "\n     var abby = {name: 'Abby', age: 7, hair: 'blond'};\n     var fred = {name: 'Fred', age: 12, hair: 'brown'};\n     var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n     var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n     var kids = [abby, fred, rusty, alois];\n     var hasBrownHair = propEq('hair', 'brown');\n     filter(hasBrownHair, kids); //=> [fred, rusty]"
    ],
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "propName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "file",
    "name": "ts_temp/object/propOr.js",
    "content": "import curryN from '../function/curryN';\nimport prop from './prop';\n/**\n * If the given, non-null object has an own property with the specified name,\n * returns the value of that property. Otherwise returns the provided default\n * value.\n *\n * @param {String} propName The name of the property to return.\n * @param {*} value The default value.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *\n *      propOr('name', 'Bob')(alice);  //=> 'ALICE'\n *      propOr('favoriteLibrary', 'react')(alice);  //=> 'react'\n */\nexport const propOr = curryN(3, (propName, value, obj) => {\n    const v = prop(propName, obj);\n    return v != null ? v : value;\n});\nexport default propOr;\n//# sourceMappingURL=propOr.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/propOr.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "variable",
    "name": "propOr",
    "memberof": "ts_temp/object/propOr.js",
    "static": true,
    "longname": "ts_temp/object/propOr.js~propOr",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/propOr",
    "importStyle": "{propOr}",
    "description": "If the given, non-null object has an own property with the specified name,\nreturns the value of that property. Otherwise returns the provided default\nvalue.",
    "examples": [
      "\n     var alice = {\n       name: 'ALICE',\n       age: 101\n     };\n\n     propOr('name', 'Bob')(alice);  //=> 'ALICE'\n     propOr('favoriteLibrary', 'react')(alice);  //=> 'react'"
    ],
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "propName",
        "description": "The name of the property to return."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The default value."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to query."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The value of given property of the supplied object or the default value."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "file",
    "name": "ts_temp/object/propSet.js",
    "content": "import curryN from '../function/curryN';\nimport has from './has';\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. All non-primitive properties are\n * copied by reference.\n *\n * **Note:** If property in the object is equal to value by reference then function\n * just returns object without changes\n *\n * @param {String} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @example\n *\n *      propSet('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nexport const propSet = curryN(3, (prop, val, obj = {}) => {\n    if (has(prop, obj) && obj[prop] === val) {\n        return obj;\n    }\n    return {\n        ...obj,\n        [prop]: val,\n    };\n});\nexport default propSet;\n//# sourceMappingURL=propSet.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/propSet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 357,
    "kind": "variable",
    "name": "propSet",
    "memberof": "ts_temp/object/propSet.js",
    "static": true,
    "longname": "ts_temp/object/propSet.js~propSet",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/propSet",
    "importStyle": "{propSet}",
    "description": "Makes a shallow clone of an object, setting or overriding the specified\nproperty with the given value. All non-primitive properties are\ncopied by reference.\n\n**Note:** If property in the object is equal to value by reference then function\njust returns object without changes",
    "examples": [
      "\n     propSet('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prop",
        "description": "The property name to set"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "The new value"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to clone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A new object equivalent to the original except for the changed property."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "file",
    "name": "ts_temp/object/propSetBy.js",
    "content": "import curryN from '../function/curryN';\nimport has from './has';\nimport propApply from './propApply';\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the result of `fn` call.\n *\n * **Note:** If property in the object is equal to value by reference then function\n * just returns object without changes\n *\n * @param {String} prop The property name to set\n * @param {Function} fn The function to execute\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @example\n *\n *      propSetBy('a', x => x+1, {a: 1}); //=> {a: 2}\n */\nexport const propSetBy = curryN(3, (prop, fn, obj = {}) => {\n    const res = propApply(prop, fn, obj);\n    if (has(prop, obj) && obj[prop] === res) {\n        return obj;\n    }\n    return {\n        ...obj,\n        [prop]: res,\n    };\n});\nexport default propSetBy;\n//# sourceMappingURL=propSetBy.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/propSetBy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 359,
    "kind": "variable",
    "name": "propSetBy",
    "memberof": "ts_temp/object/propSetBy.js",
    "static": true,
    "longname": "ts_temp/object/propSetBy.js~propSetBy",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/propSetBy",
    "importStyle": "{propSetBy}",
    "description": "Makes a shallow clone of an object, setting or overriding the specified\nproperty with the result of `fn` call.\n\n**Note:** If property in the object is equal to value by reference then function\njust returns object without changes",
    "examples": [
      "\n     propSetBy('a', x => x+1, {a: 1}); //=> {a: 2}"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prop",
        "description": "The property name to set"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to execute"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to clone"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A new object equivalent to the original except for the changed property."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "file",
    "name": "ts_temp/object/reduce.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns a single item by iterating through the obj, successively calling\n * the iterator function and passing it an accumulator value, current\n * value and current key from the obj, and then passing the result to the next call.\n *\n * @param {Function} fn The iterator function. Receives three argument, `accumulator`, `value`, `key`.\n * @param {*} acc The accumulator value.\n * @param {Object} obj The object to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var obj = { a: 1, b: 2, c: 3};\n *      var plus = (a, b) => a + b;\n *\n *      reduce(plus, 10, obj); //=> 16\n */\nexport const reduce = curryN(3, (fn, acc, obj = {}) => {\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            acc = fn(acc, obj[key], key, obj);\n        }\n    }\n    return acc;\n});\nexport default reduce;\n//# sourceMappingURL=reduce.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/reduce.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 361,
    "kind": "variable",
    "name": "reduce",
    "memberof": "ts_temp/object/reduce.js",
    "static": true,
    "longname": "ts_temp/object/reduce.js~reduce",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/reduce",
    "importStyle": "{reduce}",
    "description": "Returns a single item by iterating through the obj, successively calling\nthe iterator function and passing it an accumulator value, current\nvalue and current key from the obj, and then passing the result to the next call.",
    "examples": [
      "\n     var obj = { a: 1, b: 2, c: 3};\n     var plus = (a, b) => a + b;\n\n     reduce(plus, 10, obj); //=> 16"
    ],
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The iterator function. Receives three argument, `accumulator`, `value`, `key`."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "acc",
        "description": "The accumulator value."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to iterate over."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The final, accumulated value."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "file",
    "name": "ts_temp/object/size.js",
    "content": "import objectKeys from './keys';\n/**\n * Gets the size of `obj` by returning the number of own enumerable properties.\n *\n * @param {Object} obj The collection to inspect.\n * @returns {number} Returns the collection size.\n * @example\n *\n * size({ 'a': 1, 'b': 2 }); // => 2\n *\n */\nexport const size = (obj) => objectKeys(obj).length;\nexport default size;\n//# sourceMappingURL=size.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/size.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 363,
    "kind": "function",
    "name": "size",
    "memberof": "ts_temp/object/size.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/object/size.js~size",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/size",
    "importStyle": "{size}",
    "description": "Gets the size of `obj` by returning the number of own enumerable properties.",
    "examples": [
      "\nsize({ 'a': 1, 'b': 2 }); // => 2"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Returns the collection size."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The collection to inspect."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns the collection size."
    }
  },
  {
    "__docId__": 364,
    "kind": "file",
    "name": "ts_temp/object/toPairs.js",
    "content": "import objKeys from './keys';\n/**\n * Converts an object into an array of key, value arrays. Only the object's\n * own properties are used.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own properties.\n * @example\n *\n *      toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n */\nexport const toPairs = ((obj = {}) => {\n    const keys = objKeys(obj);\n    const len = keys.length;\n    const result = new Array(len);\n    for (let i = 0; i < len; i++) {\n        result[i] = [keys[i], obj[keys[i]]];\n    }\n    return result;\n});\nexport default toPairs;\n//# sourceMappingURL=toPairs.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/toPairs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 365,
    "kind": "function",
    "name": "toPairs",
    "memberof": "ts_temp/object/toPairs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/object/toPairs.js~toPairs",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/toPairs",
    "importStyle": "{toPairs}",
    "description": "Converts an object into an array of key, value arrays. Only the object's\nown properties are used.\nNote that the order of the output array is not guaranteed to be consistent\nacross different JS platforms.",
    "examples": [
      "\n     toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to extract from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of key, value arrays from the object's own properties."
    }
  },
  {
    "__docId__": 366,
    "kind": "file",
    "name": "ts_temp/object/values.js",
    "content": "import objectKeys from './keys';\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @example\n *\n *      values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nexport const values = ((obj) => {\n    const keys = objectKeys(obj);\n    const len = keys.length;\n    const values = new Array(len);\n    for (let i = 0; i < len; i++) {\n        values[i] = obj[keys[i]];\n    }\n    return values;\n});\nexport default values;\n//# sourceMappingURL=values.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/values.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 367,
    "kind": "function",
    "name": "values",
    "memberof": "ts_temp/object/values.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/object/values.js~values",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/values",
    "importStyle": "{values}",
    "description": "Returns a list of all the enumerable own properties of the supplied object.\nNote that the order of the output array is not guaranteed across different\nJS platforms.",
    "examples": [
      "\n     values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to extract values from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of the values of the object's own properties."
    }
  },
  {
    "__docId__": 368,
    "kind": "file",
    "name": "ts_temp/object/where.js",
    "content": "import curryN from '../function/curryN';\nimport has from './has';\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * @param {Object} spec\n * @param {Object} obj\n * @return {Boolean}\n * @example\n *\n *      // pred :: Object -> Boolean\n *      var pred = where({\n *        a: isEqual('foo'),\n *        b: complement(isEqual('bar')),\n *        x: a => a > 10,\n *        y: a => a < 20\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */\nexport const where = curryN(2, (spec = {}, obj = {}) => {\n    for (const prop in spec) {\n        if (has(prop, spec) && !spec[prop](obj[prop], prop, obj)) {\n            return false;\n        }\n    }\n    return true;\n});\nexport default where;\n//# sourceMappingURL=where.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/object/where.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 369,
    "kind": "variable",
    "name": "where",
    "memberof": "ts_temp/object/where.js",
    "static": true,
    "longname": "ts_temp/object/where.js~where",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/object/where",
    "importStyle": "{where}",
    "description": "Takes a spec object and a test object; returns true if the test satisfies\nthe spec. Each of the spec's own properties must be a predicate function.\nEach predicate is applied to the value of the corresponding property of the\ntest object. `where` returns true if all the predicates return true, false\notherwise.",
    "examples": [
      "\n     // pred :: Object -> Boolean\n     var pred = where({\n       a: isEqual('foo'),\n       b: complement(isEqual('bar')),\n       x: a => a > 10,\n       y: a => a < 20\n     });\n\n     pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n     pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n     pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n     pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n     pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false"
    ],
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "spec",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "ts_temp/promise/rejectWith.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns a promise that rejects with a value returned\n * by the supplied function when passed the supplied payload\n *\n * @param {Function} func\n * @param {*[]} payload\n * @returns {Promise}\n * @example\n *      rejectWith(toLowerCase, 'Error').catch( err => console.error(err) );// => 'error'\n */\nexport const rejectWith = curryN(2, (func, ...payload) => {\n    return Promise.reject(func(...payload));\n});\nexport default rejectWith;\n//# sourceMappingURL=rejectWith.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/promise/rejectWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "variable",
    "name": "rejectWith",
    "memberof": "ts_temp/promise/rejectWith.js",
    "static": true,
    "longname": "ts_temp/promise/rejectWith.js~rejectWith",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/promise/rejectWith",
    "importStyle": "{rejectWith}",
    "description": "Returns a promise that rejects with a value returned\nby the supplied function when passed the supplied payload",
    "examples": [
      "     rejectWith(toLowerCase, 'Error').catch( err => console.error(err) );// => 'error'"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*[]"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "file",
    "name": "ts_temp/promise/resolveWith.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Returns a promise that resolves with a value returned\n * by the supplied function when passed the supplied payload\n *\n * @param {Function} func\n * @param {*[]} payload\n * @returns {Promise}\n * @example\n *      rejectWith(toLowerCase, 'OK').then( res => console.info(res) );// => 'ok'\n */\nexport const resolveWith = curryN(2, (func, ...payload) => {\n    return Promise.resolve(func(...payload));\n});\nexport default resolveWith;\n//# sourceMappingURL=resolveWith.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/promise/resolveWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 373,
    "kind": "variable",
    "name": "resolveWith",
    "memberof": "ts_temp/promise/resolveWith.js",
    "static": true,
    "longname": "ts_temp/promise/resolveWith.js~resolveWith",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/promise/resolveWith",
    "importStyle": "{resolveWith}",
    "description": "Returns a promise that resolves with a value returned\nby the supplied function when passed the supplied payload",
    "examples": [
      "     rejectWith(toLowerCase, 'OK').then( res => console.info(res) );// => 'ok'"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*[]"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "file",
    "name": "ts_temp/promise/tap.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Runs the given promise with the supplied argument. Returns the argument, when promise is resolved.\n *\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      var sayX = x => console.log('x is ' + x);\n *      Promise.resolve(5).then(promiseTap(sayX));\n *      // logs 'x is 5'\n */\nexport const tap = curryN(2, (fn, x) => Promise.resolve()\n    .then(() => fn(x))\n    .then(() => x));\nexport default tap;\n//# sourceMappingURL=tap.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/promise/tap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 375,
    "kind": "variable",
    "name": "tap",
    "memberof": "ts_temp/promise/tap.js",
    "static": true,
    "longname": "ts_temp/promise/tap.js~tap",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/promise/tap",
    "importStyle": "{tap}",
    "description": "Runs the given promise with the supplied argument. Returns the argument, when promise is resolved.",
    "examples": [
      "\n     var sayX = x => console.log('x is ' + x);\n     Promise.resolve(5).then(promiseTap(sayX));\n     // logs 'x is 5'"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "The function to call with `x`. The return value of `fn` will be thrown away."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "`x`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "file",
    "name": "ts_temp/string/capitalize.js",
    "content": "/**\n * Returns the capitalized version of a string.\n *\n * @param {String} str The string to capitalize.\n * @return {String} The capitalized version of `str`.\n * @example\n *\n *      capitalize('xyz'); //=> 'Xyz'\n */\nexport const capitalize = (str = '') => `${str.charAt(0).toUpperCase()}${str.slice(1).toLowerCase()}`;\nexport default capitalize;\n//# sourceMappingURL=capitalize.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/capitalize.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 377,
    "kind": "function",
    "name": "capitalize",
    "memberof": "ts_temp/string/capitalize.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/string/capitalize.js~capitalize",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/capitalize",
    "importStyle": "{capitalize}",
    "description": "Returns the capitalized version of a string.",
    "examples": [
      "\n     capitalize('xyz'); //=> 'Xyz'"
    ],
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to capitalize."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The capitalized version of `str`."
    }
  },
  {
    "__docId__": 378,
    "kind": "file",
    "name": "ts_temp/string/endsWith.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Checks if a string ends with the provided postfix\n *\n * @param {string} postfix\n * @param {string} str\n * @return {Boolean}\n * @example\n *\n *      endsWith('c', 'abc')                //=> true\n *      endsWith('b', 'abc')                //=> false\n */\nexport const endsWith = curryN(2, (postfix = '', str = '') => str.slice(-postfix.length) === postfix);\nexport default endsWith;\n//# sourceMappingURL=endsWith.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/endsWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 379,
    "kind": "variable",
    "name": "endsWith",
    "memberof": "ts_temp/string/endsWith.js",
    "static": true,
    "longname": "ts_temp/string/endsWith.js~endsWith",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/endsWith",
    "importStyle": "{endsWith}",
    "description": "Checks if a string ends with the provided postfix",
    "examples": [
      "\n     endsWith('c', 'abc')                //=> true\n     endsWith('b', 'abc')                //=> false"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "postfix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "file",
    "name": "ts_temp/string/escape.js",
    "content": "const escapeRegExp = /[&<>\"']/g;\nconst htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&#39;',\n};\nconst replace = (char) => htmlEscapes[char];\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n *\n * @param {string} str The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * escape('fred, barney, & pebbles'); // => 'fred, barney, &amp; pebbles'\n */\nexport const escape = (str = '') => str.replace(escapeRegExp, replace);\nexport default escape;\n//# sourceMappingURL=escape.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/escape.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 381,
    "kind": "variable",
    "name": "escapeRegExp",
    "memberof": "ts_temp/string/escape.js",
    "static": true,
    "longname": "ts_temp/string/escape.js~escapeRegExp",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/string/escape",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 382,
    "kind": "variable",
    "name": "htmlEscapes",
    "memberof": "ts_temp/string/escape.js",
    "static": true,
    "longname": "ts_temp/string/escape.js~htmlEscapes",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/string/escape",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "{\"&\": string, \"<\": string, \">\": string, \"\"\": string, \"'\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 383,
    "kind": "function",
    "name": "replace",
    "memberof": "ts_temp/string/escape.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/string/escape.js~replace",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/string/escape",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "char",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 384,
    "kind": "function",
    "name": "escape",
    "memberof": "ts_temp/string/escape.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/string/escape.js~escape",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/escape",
    "importStyle": "{escape}",
    "description": "Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\ncorresponding HTML entities.",
    "examples": [
      "\nescape('fred, barney, & pebbles'); // => 'fred, barney, &amp; pebbles'"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Returns the escaped string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to escape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the escaped string."
    }
  },
  {
    "__docId__": 385,
    "kind": "file",
    "name": "ts_temp/string/escapeRegExp.js",
    "content": "const regexEscape = /[\\\\^$.*+?()[\\]{}|]/g;\n/**\n * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n *\n * @param {string} str The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * escapeRegExp('[test](utils)'); // => '\\[test\\]\\(utils\\)'\n */\nexport const escapeRegExp = (str = '') => str.replace(regexEscape, '\\\\$&');\nexport default escapeRegExp;\n//# sourceMappingURL=escapeRegExp.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/escapeRegExp.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 386,
    "kind": "variable",
    "name": "regexEscape",
    "memberof": "ts_temp/string/escapeRegExp.js",
    "static": true,
    "longname": "ts_temp/string/escapeRegExp.js~regexEscape",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/string/escapeRegExp",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 387,
    "kind": "function",
    "name": "escapeRegExp",
    "memberof": "ts_temp/string/escapeRegExp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/string/escapeRegExp.js~escapeRegExp",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/escapeRegExp",
    "importStyle": "{escapeRegExp}",
    "description": "Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n\"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.",
    "examples": [
      "\nescapeRegExp('[test](utils)'); // => '\\[test\\]\\(utils\\)'"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Returns the escaped string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to escape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the escaped string."
    }
  },
  {
    "__docId__": 388,
    "kind": "file",
    "name": "ts_temp/string/repeat.js",
    "content": "import curryN from '../function/curryN';\nimport isString from '../is/string';\n/**\n * Returns a string containing a repeated identical value.\n *\n * @param {Number} n The number to repeat value.\n * @param {String} value The value to repeat.\n * @return {String} A new string containing `n` `value`s.\n * @example\n *\n *      repeat(5, 'h'); //=> 'hhhhh'\n *\n */\nexport const repeat = curryN(2, (n = 0, value) => {\n    if (!isString(value)) {\n        return '';\n    }\n    let result = '';\n    for (let i = 0; i < n; i++) {\n        result += value;\n    }\n    return result;\n});\nexport default repeat;\n//# sourceMappingURL=repeat.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/repeat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 389,
    "kind": "variable",
    "name": "repeat",
    "memberof": "ts_temp/string/repeat.js",
    "static": true,
    "longname": "ts_temp/string/repeat.js~repeat",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/repeat",
    "importStyle": "{repeat}",
    "description": "Returns a string containing a repeated identical value.",
    "examples": [
      "\n     repeat(5, 'h'); //=> 'hhhhh'"
    ],
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The number to repeat value."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to repeat."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A new string containing `n` `value`s."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "file",
    "name": "ts_temp/string/replace.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */\nexport const replace = curryN(3, (pattern = '', replacement = '', str = '') => str.replace(pattern, replacement));\nexport default replace;\n//# sourceMappingURL=replace.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/replace.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 391,
    "kind": "variable",
    "name": "replace",
    "memberof": "ts_temp/string/replace.js",
    "static": true,
    "longname": "ts_temp/string/replace.js~replace",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/replace",
    "importStyle": "{replace}",
    "description": "Replace a substring or regex match in a string with a replacement.",
    "examples": [
      "\n     replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n\n     // Use the \"g\" (global) flag to replace all occurrences:\n     replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "RegExp",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": "A regular expression or a substring to match."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "replacement",
        "description": "The string to replace the matches with."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The String to do the search and replacement in."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The result."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "file",
    "name": "ts_temp/string/split.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @param {String|RegExp} delim The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `str`.\n * @example\n *\n *      split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nexport const split = curryN(2, (delim = '', str = '') => str.split(delim));\nexport default split;\n//# sourceMappingURL=split.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/split.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 393,
    "kind": "variable",
    "name": "split",
    "memberof": "ts_temp/string/split.js",
    "static": true,
    "longname": "ts_temp/string/split.js~split",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/split",
    "importStyle": "{split}",
    "description": "Splits a string into an array of strings based on the given\nseparator.",
    "examples": [
      "\n     split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "delim",
        "description": "The pattern."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to separate into an array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The array of strings from `str` separated by `str`."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "file",
    "name": "ts_temp/string/startsWith.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Checks if a string starts with the provided prefix\n *\n * @param {string} prefix\n * @param {string} str\n * @return {Boolean}\n * @example\n *\n *      startsWith('a', 'abc')                //=> true\n *      startsWith('b', 'abc')                //=> false\n */\nexport const startsWith = curryN(2, (prefix = '', str = '') => str.slice(0, prefix.length) === prefix);\nexport default startsWith;\n//# sourceMappingURL=startsWith.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/startsWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 395,
    "kind": "variable",
    "name": "startsWith",
    "memberof": "ts_temp/string/startsWith.js",
    "static": true,
    "longname": "ts_temp/string/startsWith.js~startsWith",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/startsWith",
    "importStyle": "{startsWith}",
    "description": "Checks if a string starts with the provided prefix",
    "examples": [
      "\n     startsWith('a', 'abc')                //=> true\n     startsWith('b', 'abc')                //=> false"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "file",
    "name": "ts_temp/string/template.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Replaces string keywords with provided values\n *\n * @param {Object} replacements object with keywords and corresponding replacements\n * @param {String} str string with keywords in a correct format '%{keyword}'\n * @return {String} String with replaced keywords\n * @example\n *\n *      template({ fruit: 'banana' }, 'Petya has a %{fruit}') // => Petya has a banana\n */\nexport const template = curryN(2, (replacements = {}, str = '') => str.replace(/%\\{.+?\\}/g, (match) => {\n    const replacementKey = match.replace(/\\W/g, '');\n    return replacements[replacementKey];\n}));\nexport default template;\n//# sourceMappingURL=template.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/template.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 397,
    "kind": "variable",
    "name": "template",
    "memberof": "ts_temp/string/template.js",
    "static": true,
    "longname": "ts_temp/string/template.js~template",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/template",
    "importStyle": "{template}",
    "description": "Replaces string keywords with provided values",
    "examples": [
      "\n     template({ fruit: 'banana' }, 'Petya has a %{fruit}') // => Petya has a banana"
    ],
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "replacements",
        "description": "object with keywords and corresponding replacements"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "string with keywords in a correct format '%{keyword}'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "String with replaced keywords"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "file",
    "name": "ts_temp/string/test.js",
    "content": "import curryN from '../function/curryN';\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n */\nexport const test = curryN(2, (pattern = /()/, str = '') => pattern.test(str));\nexport default test;\n//# sourceMappingURL=test.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 399,
    "kind": "variable",
    "name": "test",
    "memberof": "ts_temp/string/test.js",
    "static": true,
    "longname": "ts_temp/string/test.js~test",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/test",
    "importStyle": "{test}",
    "description": "Determines whether a given string matches a given regular expression.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "file",
    "name": "ts_temp/string/toLower.js",
    "content": "/**\n * Returns the lower case version of a string.\n *\n * @param {String} str The string to lower case.\n * @return {String} The lower case version of `str`.\n * @example\n *\n *      toLower('XYZ'); //=> 'xyz'\n */\nexport const toLower = (str = '') => str.toLowerCase();\nexport default toLower;\n//# sourceMappingURL=toLower.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/toLower.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 401,
    "kind": "function",
    "name": "toLower",
    "memberof": "ts_temp/string/toLower.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/string/toLower.js~toLower",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/toLower",
    "importStyle": "{toLower}",
    "description": "Returns the lower case version of a string.",
    "examples": [
      "\n     toLower('XYZ'); //=> 'xyz'"
    ],
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to lower case."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The lower case version of `str`."
    }
  },
  {
    "__docId__": 402,
    "kind": "file",
    "name": "ts_temp/string/toString.js",
    "content": "/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values.\n *\n * @param {*} val The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * toString(null); // => ''\n *\n * toString('test'); // => 'test'\n *\n * toString([1, 2, 3]); => '1,2,3'\n */\nexport const toString = (val) => {\n    if (val == null) {\n        return '';\n    }\n    return `${val}`;\n};\nexport default toString;\n//# sourceMappingURL=toString.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/toString.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 403,
    "kind": "function",
    "name": "toString",
    "memberof": "ts_temp/string/toString.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/string/toString.js~toString",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/toString",
    "importStyle": "{toString}",
    "description": "Converts `value` to a string. An empty string is returned for `null`\nand `undefined` values.",
    "examples": [
      "\ntoString(null); // => ''\n\ntoString('test'); // => 'test'\n\ntoString([1, 2, 3]); => '1,2,3'"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Returns the converted string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "The value to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the converted string."
    }
  },
  {
    "__docId__": 404,
    "kind": "file",
    "name": "ts_temp/string/toUpper.js",
    "content": "/**\n * Returns the upper case version of a string.\n *\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @example\n *\n *      toLower('xyz'); //=> 'XYZ'\n */\nexport const toUpper = (str = '') => str.toUpperCase();\nexport default toUpper;\n//# sourceMappingURL=toUpper.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/toUpper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 405,
    "kind": "function",
    "name": "toUpper",
    "memberof": "ts_temp/string/toUpper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/string/toUpper.js~toUpper",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/toUpper",
    "importStyle": "{toUpper}",
    "description": "Returns the upper case version of a string.",
    "examples": [
      "\n     toLower('xyz'); //=> 'XYZ'"
    ],
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to upper case."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The upper case version of `str`."
    }
  },
  {
    "__docId__": 406,
    "kind": "file",
    "name": "ts_temp/string/trim.js",
    "content": "/**\n * Removes leading and trailing whitespace from `str`.\n *\n * @param {String} str The string to trim.\n * @returns {String} Returns the trimmed string.\n * @example\n *\n * trim('  abc  '); // => 'abc'\n *\n */\nexport const trim = (str = '') => str.toString().trim() || '';\nexport default trim;\n//# sourceMappingURL=trim.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/trim.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 407,
    "kind": "function",
    "name": "trim",
    "memberof": "ts_temp/string/trim.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/string/trim.js~trim",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/trim",
    "importStyle": "{trim}",
    "description": "Removes leading and trailing whitespace from `str`.",
    "examples": [
      "\ntrim('  abc  '); // => 'abc'"
    ],
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Returns the trimmed string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to trim."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Returns the trimmed string."
    }
  },
  {
    "__docId__": 408,
    "kind": "file",
    "name": "ts_temp/string/trimLeft.js",
    "content": "/**\n * Removes leading whitespace from `str`.\n *\n * @param {String} str The string to trim.\n * @returns {String} Returns the trimmed string.\n * @example\n *\n * trimLeft('  abc  '); // => 'abc   '\n *\n */\nexport const trimLeft = (str = '') => str.replace(/^[\\s\\uFEFF\\xA0]+/g, '');\nexport default trimLeft;\n//# sourceMappingURL=trimLeft.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/trimLeft.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 409,
    "kind": "function",
    "name": "trimLeft",
    "memberof": "ts_temp/string/trimLeft.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/string/trimLeft.js~trimLeft",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/trimLeft",
    "importStyle": "{trimLeft}",
    "description": "Removes leading whitespace from `str`.",
    "examples": [
      "\ntrimLeft('  abc  '); // => 'abc   '"
    ],
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Returns the trimmed string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to trim."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Returns the trimmed string."
    }
  },
  {
    "__docId__": 410,
    "kind": "file",
    "name": "ts_temp/string/unescape.js",
    "content": "const unescapeRegExp = /&(?:amp|lt|gt|quot|#39);/g;\nconst htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': '\\'',\n};\nconst replace = (char) => htmlUnescapes[char];\n/**\n * The inverse of `escape`; this method converts the HTML entities\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n * their corresponding characters.\n *\n * @param {string} str The string to unescape.\n * @returns {string} Returns the unescaped string.\n * @example\n *\n * unescape('fred, barney, &amp; pebbles'); // => 'fred, barney, & pebbles'\n */\nexport const unescape = (str = '') => str.replace(unescapeRegExp, replace);\nexport default unescape;\n//# sourceMappingURL=unescape.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/string/unescape.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 411,
    "kind": "variable",
    "name": "unescapeRegExp",
    "memberof": "ts_temp/string/unescape.js",
    "static": true,
    "longname": "ts_temp/string/unescape.js~unescapeRegExp",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/string/unescape",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 412,
    "kind": "variable",
    "name": "htmlUnescapes",
    "memberof": "ts_temp/string/unescape.js",
    "static": true,
    "longname": "ts_temp/string/unescape.js~htmlUnescapes",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/string/unescape",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "{\"&amp;\": string, \"&lt;\": string, \"&gt;\": string, \"&quot;\": string, \"&#39;\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 413,
    "kind": "function",
    "name": "replace",
    "memberof": "ts_temp/string/unescape.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/string/unescape.js~replace",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/string/unescape",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "char",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 414,
    "kind": "function",
    "name": "unescape",
    "memberof": "ts_temp/string/unescape.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/string/unescape.js~unescape",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/string/unescape",
    "importStyle": "{unescape}",
    "description": "The inverse of `escape`; this method converts the HTML entities\n`&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\ntheir corresponding characters.",
    "examples": [
      "\nunescape('fred, barney, &amp; pebbles'); // => 'fred, barney, & pebbles'"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Returns the unescaped string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to unescape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns the unescaped string."
    }
  },
  {
    "__docId__": 415,
    "kind": "file",
    "name": "ts_temp/type.js",
    "content": "/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @param {*} x The value to test\n * @return {String}\n * @example\n *\n *      type({}); //=> \"Object\"\n *      type(1); //=> \"Number\"\n *      type(false); //=> \"Boolean\"\n *      type('s'); //=> \"String\"\n *      type(null); //=> \"Null\"\n *      type([]); //=> \"Array\"\n *      type(/[A-z]/); //=> \"RegExp\"\n */\nexport const type = (x) => {\n    if (x === null) {\n        return 'Null';\n    }\n    if (x === undefined) {\n        return 'Undefined';\n    }\n    return Object.prototype.toString.call(x).slice(8, -1);\n};\nexport default type;\n//# sourceMappingURL=type.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/type.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 416,
    "kind": "function",
    "name": "type",
    "memberof": "ts_temp/type.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/type.js~type",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/type",
    "importStyle": "{type}",
    "description": "Gives a single-word string description of the (native) type of a value,\nreturning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\nattempt to distinguish user Object types any further, reporting them all as\n'Object'.",
    "examples": [
      "\n     type({}); //=> \"Object\"\n     type(1); //=> \"Number\"\n     type(false); //=> \"Boolean\"\n     type('s'); //=> \"String\"\n     type(null); //=> \"Null\"\n     type([]); //=> \"Array\"\n     type(/[A-z]/); //=> \"RegExp\""
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The value to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 417,
    "kind": "file",
    "name": "ts_temp/typings/types.js",
    "content": "//# sourceMappingURL=types.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/typings/types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 418,
    "kind": "file",
    "name": "ts_temp/uniqueId.js",
    "content": "let idCounter = 0;\n/**\n * Generates a unique ID.\n *\n * @returns {number} Returns the unique ID.\n */\nexport const uniqueId = () => ++idCounter;\nexport default uniqueId;\n//# sourceMappingURL=uniqueId.js.map",
    "static": true,
    "longname": "/Users/ty/codes/tib/utils/ts_temp/uniqueId.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 419,
    "kind": "variable",
    "name": "idCounter",
    "memberof": "ts_temp/uniqueId.js",
    "static": true,
    "longname": "ts_temp/uniqueId.js~idCounter",
    "access": "public",
    "export": false,
    "importPath": "@tib/utils/uniqueId",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 420,
    "kind": "function",
    "name": "uniqueId",
    "memberof": "ts_temp/uniqueId.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "ts_temp/uniqueId.js~uniqueId",
    "access": "public",
    "export": true,
    "importPath": "@tib/utils/uniqueId",
    "importStyle": "{uniqueId}",
    "description": "Generates a unique ID.",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Returns the unique ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns the unique ID."
    },
    "params": []
  },
  {
    "kind": "index",
    "content": "# Tib Utils\n[![Build](https://gitr.net/tibjs/utils/badges/master/pipeline.svg)](https://gitr.net/tibjs/utils/commits/master) [![Coverage](https://gitr.net/tibjs/utils/badges/master/coverage.svg)](https://gitr.net/tibjs/utils)\n\n> Fast, small and purely functional utility library\n\n`Tib Utils` is forked from [Tinkoff Utils](https://github.com/TinkoffCreditSystems/utils.js)\n\n## Install\n```\n$ npm install @tib/utils\n```\n\n## Features\n- [Fast](#benchmarks)\n- [Small](#bundle-size)\n- [Fully tested](https://coveralls.io/github/tib/utils)\n- [Documented](https://tinkoffcreditsystems.github.io/utils)\n- Purely functional\n- Modern codebase\n\n## Structure of the library\n* [`/object`](https://github.com/tibjs/utils/tree/master/src/object) – for objects\n* [`/string`](https://github.com/tibjs/utils/tree/master/src/string) – for strings\n* [`/promise`](https://github.com/tibjs/utils/tree/master/src/promise) – for promises\n* [`/array`](https://github.com/tibjs/utils/tree/master/src/array) – for arrays or array-like objects\n* [`/function`](https://github.com/tibjs/utils/tree/master/src/function) – for functions – composition, currying and so on, also a set of simple functions (noop, T, F)\n* [`/is`](https://github.com/tibjs/utils/tree/master/src/is) – set of type checking methods\n* [`/`](https://github.com/tibjs/utils/tree/master/src) – root contains utilities which don't satisfy any of the above categories or are universal\n\n## Usage\n```js\nimport pathOr from '@tib/utils/object/pathOr';\nimport compose from '@tib/utils/function/compose';\nimport toLower from '@tib/utils/string/toLower';\nimport map from '@tib/utils/array/map'\n\nconst toLowerName = compose(\n    toLower,\n    pathOr(['name'], '')\n);\nconst result = map(toLowerName)([{name: 'testA'}, {name: 'testb'}])\n```\n\n## Benchmarks\n```bash\n$ npm run benchmark\n```\n\n| Utility | Lodash | Ramda | Utils |\n| --- | --- | --- | --- |\n| clone | 120,807 ops/sec | 112,053 ops/sec | 293,572 ops/sec |\n| array/filter | 2,080,728 ops/sec | 1,849,633 ops/sec | 2,046,113 ops/sec |\n| is/empty | 1,506,963 ops/sec | 474,177 ops/sec | 3,731,564 ops/sec |\n| function/flip | 7,528,745 ops/sec | 3,735,143 ops/sec | 3,490,207 ops/sec |\n| object/path | 12,023,128 ops/sec | 8,894,639 ops/sec | 7,587,076 ops/sec |\n| string/trim | 4,215,928 ops/sec | 1,034,655 ops/sec | 6,029,794 ops/sec |\n\n## Browser support\n\n- Chrome >= 40\n- Firefox >= 52\n- Edge >= 14\n- IE >= 11\n- Safari >= 10\n- iOS >= 10\n- Android >= 4.4\n\n## Node support\n- 6.4.0 and higher\n\n## Bundle size\n| Library | Bundle size |\n| --- | --- |\n| import _ from 'lodash' | 70.1 kb |\n| import ... from 'lodash/...' | 21.8 kb |\n| import R from 'ramda' | 41.3 kb |\n| import ... from 'ramda/src/...' | 10 kb |\n| import ... from '@tib/utils/...' | 2.32 kb |\n\nFor detailed comparison with specific libraries see [COMPARE.md](https://github.com/tibjs/utils/tree/master/COMPARE.md)\n",
    "longname": "/Users/ty/codes/tib/utils/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@tib/utils\",\n  \"version\": \"2.4.4\",\n  \"author\": \"Yuan Tao <towyuan@outlook.com>\",\n  \"scripts\": {\n    \"release\": \"node scripts/release.js\",\n    \"benchmark\": \"ts-node --skip-project benchmark.ts\",\n    \"prebenchmark\": \"npm install --no-save ts-node lodash ramda lazy.js underscore\",\n    \"docs:gh\": \"node ./generate/docs/gh.js\",\n    \"docs:gl\": \"node ./generate/docs/gl.js\",\n    \"test\": \"jest --coverage\",\n    \"test:ci\": \"npm run test -- --maxWorkers=4 && cat ./coverage/lcov.info | coveralls\"\n  },\n  \"description\": \"Fast, small and purely functional utility library\",\n  \"repository\": \"https://gitr.net/tib/utils\",\n  \"bugs\": \"https://gitr.net/tib/utils/issues\",\n  \"keywords\": [\n    \"tib\",\n    \"utils\",\n    \"ramda\",\n    \"lodash\",\n    \"curry\",\n    \"performance\"\n  ],\n  \"sideEffects\": false,\n  \"license\": \"Apache-2.0\",\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.10.5\",\n    \"@babel/core\": \"^7.10.5\",\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.10.4\",\n    \"@babel/plugin-transform-modules-commonjs\": \"^7.10.4\",\n    \"@babel/preset-env\": \"^7.10.4\",\n    \"@babel/preset-react\": \"^7.10.4\",\n    \"@types/fs-extra\": \"^9.0.1\",\n    \"@types/jest\": \"^26.0.7\",\n    \"babel-core\": \"^6.26.3\",\n    \"benchmark\": \"^2.1.4\",\n    \"chalk\": \"^4.1.0\",\n    \"coveralls\": \"^3.1.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-importpath-plugin\": \"^1.0.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"execa\": \"^4.0.3\",\n    \"fs-extra\": \"^9.0.1\",\n    \"gh-pages\": \"^3.1.0\",\n    \"inquirer\": \"^7.3.3\",\n    \"jest\": \"^26.1.0\",\n    \"jsdom\": \"^16.3.0\",\n    \"ora\": \"^4.0.5\",\n    \"prettier\": \"^2.0.5\",\n    \"react\": \"^16.13.1\",\n    \"react-is\": \"^16.13.1\",\n    \"recursive-readdir-sync\": \"^1.0.6\",\n    \"ts-jest\": \"^26.1.3\",\n    \"typescript\": \"^3.9.7\",\n    \"walker\": \"^1.0.7\"\n  },\n  \"peerDependencies\": {\n    \"react-is\": \"*\"\n  }\n}\n",
    "longname": "/Users/ty/codes/tib/utils/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]